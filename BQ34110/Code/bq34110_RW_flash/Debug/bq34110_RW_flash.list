
bq34110_RW_flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002150  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08002210  08002210  00012210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002244  08002244  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002244  08002244  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002244  08002244  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002244  08002244  00012244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002248  08002248  00012248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800224c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  2000000c  08002258  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08002258  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000691f  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001524  00000000  00000000  00026953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000680  00000000  00000000  00027e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005c8  00000000  00000000  000284f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010605  00000000  00000000  00028ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008a93  00000000  00000000  000390c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00061959  00000000  00000000  00041b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a34b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015f8  00000000  00000000  000a3504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080021f8 	.word	0x080021f8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080021f8 	.word	0x080021f8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fa78 	bl	8000718 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f838 	bl	800029c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f8d0 	bl	80003d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000230:	f000 f88e 	bl	8000350 <MX_I2C1_Init>
	 value_Voltage = rcv_data[0] + (rcv_data[1]<<8);
	 HAL_Delay(500);
#endif

#ifdef MANUFACTURER_ACCESS_CONTROL
	 HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000234:	2380      	movs	r3, #128	; 0x80
 8000236:	005b      	lsls	r3, r3, #1
 8000238:	4a14      	ldr	r2, [pc, #80]	; (800028c <main+0x6c>)
 800023a:	0019      	movs	r1, r3
 800023c:	0010      	movs	r0, r2
 800023e:	f000 fd34 	bl	8000caa <HAL_GPIO_TogglePin>

	 Transmit_SubCommand(&hi2c1, COMMAND_ManufacturerAccessControl, SUB_Addr_DesignCapacity);
 8000242:	4a13      	ldr	r2, [pc, #76]	; (8000290 <main+0x70>)
 8000244:	4b13      	ldr	r3, [pc, #76]	; (8000294 <main+0x74>)
 8000246:	213e      	movs	r1, #62	; 0x3e
 8000248:	0018      	movs	r0, r3
 800024a:	f000 f96f 	bl	800052c <Transmit_SubCommand>

	 Read_BQ34110(&hi2c1, COMMAND_ManufacturerAccessControl, rcv_data, 2);
 800024e:	4a12      	ldr	r2, [pc, #72]	; (8000298 <main+0x78>)
 8000250:	4810      	ldr	r0, [pc, #64]	; (8000294 <main+0x74>)
 8000252:	2302      	movs	r3, #2
 8000254:	213e      	movs	r1, #62	; 0x3e
 8000256:	f000 f933 	bl	80004c0 <Read_BQ34110>
	 Read_BQ34110(&hi2c1, COMMAND_MACData, rcv_data, 32);
 800025a:	4a0f      	ldr	r2, [pc, #60]	; (8000298 <main+0x78>)
 800025c:	480d      	ldr	r0, [pc, #52]	; (8000294 <main+0x74>)
 800025e:	2320      	movs	r3, #32
 8000260:	2140      	movs	r1, #64	; 0x40
 8000262:	f000 f92d 	bl	80004c0 <Read_BQ34110>
	 Read_BQ34110(&hi2c1, COMMAND_MACDataSum, rcv_data, 1);
 8000266:	4a0c      	ldr	r2, [pc, #48]	; (8000298 <main+0x78>)
 8000268:	480a      	ldr	r0, [pc, #40]	; (8000294 <main+0x74>)
 800026a:	2301      	movs	r3, #1
 800026c:	2160      	movs	r1, #96	; 0x60
 800026e:	f000 f927 	bl	80004c0 <Read_BQ34110>
	 Read_BQ34110(&hi2c1, COMMAND_MACDataLen, rcv_data, 1);
 8000272:	4a09      	ldr	r2, [pc, #36]	; (8000298 <main+0x78>)
 8000274:	4807      	ldr	r0, [pc, #28]	; (8000294 <main+0x74>)
 8000276:	2301      	movs	r3, #1
 8000278:	2161      	movs	r1, #97	; 0x61
 800027a:	f000 f921 	bl	80004c0 <Read_BQ34110>

	 HAL_Delay(500);
 800027e:	23fa      	movs	r3, #250	; 0xfa
 8000280:	005b      	lsls	r3, r3, #1
 8000282:	0018      	movs	r0, r3
 8000284:	f000 faac 	bl	80007e0 <HAL_Delay>
	 HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000288:	e7d4      	b.n	8000234 <main+0x14>
 800028a:	46c0      	nop			; (mov r8, r8)
 800028c:	48000800 	.word	0x48000800
 8000290:	000041f5 	.word	0x000041f5
 8000294:	20000048 	.word	0x20000048
 8000298:	20000028 	.word	0x20000028

0800029c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800029c:	b590      	push	{r4, r7, lr}
 800029e:	b097      	sub	sp, #92	; 0x5c
 80002a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a2:	2428      	movs	r4, #40	; 0x28
 80002a4:	193b      	adds	r3, r7, r4
 80002a6:	0018      	movs	r0, r3
 80002a8:	2330      	movs	r3, #48	; 0x30
 80002aa:	001a      	movs	r2, r3
 80002ac:	2100      	movs	r1, #0
 80002ae:	f001 ff9b 	bl	80021e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b2:	2318      	movs	r3, #24
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	0018      	movs	r0, r3
 80002b8:	2310      	movs	r3, #16
 80002ba:	001a      	movs	r2, r3
 80002bc:	2100      	movs	r1, #0
 80002be:	f001 ff93 	bl	80021e8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	0018      	movs	r0, r3
 80002c6:	2314      	movs	r3, #20
 80002c8:	001a      	movs	r2, r3
 80002ca:	2100      	movs	r1, #0
 80002cc:	f001 ff8c 	bl	80021e8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80002d0:	0021      	movs	r1, r4
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	2203      	movs	r2, #3
 80002d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	2201      	movs	r2, #1
 80002dc:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	2201      	movs	r2, #1
 80002e2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e4:	187b      	adds	r3, r7, r1
 80002e6:	2210      	movs	r2, #16
 80002e8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	2200      	movs	r2, #0
 80002ee:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	0018      	movs	r0, r3
 80002f4:	f001 fa2a 	bl	800174c <HAL_RCC_OscConfig>
 80002f8:	1e03      	subs	r3, r0, #0
 80002fa:	d001      	beq.n	8000300 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80002fc:	f000 f94e 	bl	800059c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000300:	2118      	movs	r1, #24
 8000302:	187b      	adds	r3, r7, r1
 8000304:	2207      	movs	r2, #7
 8000306:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000308:	187b      	adds	r3, r7, r1
 800030a:	2201      	movs	r2, #1
 800030c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030e:	187b      	adds	r3, r7, r1
 8000310:	2200      	movs	r2, #0
 8000312:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000314:	187b      	adds	r3, r7, r1
 8000316:	2200      	movs	r2, #0
 8000318:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800031a:	187b      	adds	r3, r7, r1
 800031c:	2100      	movs	r1, #0
 800031e:	0018      	movs	r0, r3
 8000320:	f001 fd2e 	bl	8001d80 <HAL_RCC_ClockConfig>
 8000324:	1e03      	subs	r3, r0, #0
 8000326:	d001      	beq.n	800032c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000328:	f000 f938 	bl	800059c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	2220      	movs	r2, #32
 8000330:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	2200      	movs	r2, #0
 8000336:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	0018      	movs	r0, r3
 800033c:	f001 fe52 	bl	8001fe4 <HAL_RCCEx_PeriphCLKConfig>
 8000340:	1e03      	subs	r3, r0, #0
 8000342:	d001      	beq.n	8000348 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000344:	f000 f92a 	bl	800059c <Error_Handler>
  }
}
 8000348:	46c0      	nop			; (mov r8, r8)
 800034a:	46bd      	mov	sp, r7
 800034c:	b017      	add	sp, #92	; 0x5c
 800034e:	bd90      	pop	{r4, r7, pc}

08000350 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000354:	4b1b      	ldr	r3, [pc, #108]	; (80003c4 <MX_I2C1_Init+0x74>)
 8000356:	4a1c      	ldr	r2, [pc, #112]	; (80003c8 <MX_I2C1_Init+0x78>)
 8000358:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800035a:	4b1a      	ldr	r3, [pc, #104]	; (80003c4 <MX_I2C1_Init+0x74>)
 800035c:	4a1b      	ldr	r2, [pc, #108]	; (80003cc <MX_I2C1_Init+0x7c>)
 800035e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000360:	4b18      	ldr	r3, [pc, #96]	; (80003c4 <MX_I2C1_Init+0x74>)
 8000362:	2200      	movs	r2, #0
 8000364:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000366:	4b17      	ldr	r3, [pc, #92]	; (80003c4 <MX_I2C1_Init+0x74>)
 8000368:	2201      	movs	r2, #1
 800036a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800036c:	4b15      	ldr	r3, [pc, #84]	; (80003c4 <MX_I2C1_Init+0x74>)
 800036e:	2200      	movs	r2, #0
 8000370:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000372:	4b14      	ldr	r3, [pc, #80]	; (80003c4 <MX_I2C1_Init+0x74>)
 8000374:	2200      	movs	r2, #0
 8000376:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000378:	4b12      	ldr	r3, [pc, #72]	; (80003c4 <MX_I2C1_Init+0x74>)
 800037a:	2200      	movs	r2, #0
 800037c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800037e:	4b11      	ldr	r3, [pc, #68]	; (80003c4 <MX_I2C1_Init+0x74>)
 8000380:	2200      	movs	r2, #0
 8000382:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000384:	4b0f      	ldr	r3, [pc, #60]	; (80003c4 <MX_I2C1_Init+0x74>)
 8000386:	2200      	movs	r2, #0
 8000388:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800038a:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <MX_I2C1_Init+0x74>)
 800038c:	0018      	movs	r0, r3
 800038e:	f000 fca7 	bl	8000ce0 <HAL_I2C_Init>
 8000392:	1e03      	subs	r3, r0, #0
 8000394:	d001      	beq.n	800039a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000396:	f000 f901 	bl	800059c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800039a:	4b0a      	ldr	r3, [pc, #40]	; (80003c4 <MX_I2C1_Init+0x74>)
 800039c:	2100      	movs	r1, #0
 800039e:	0018      	movs	r0, r3
 80003a0:	f001 f93c 	bl	800161c <HAL_I2CEx_ConfigAnalogFilter>
 80003a4:	1e03      	subs	r3, r0, #0
 80003a6:	d001      	beq.n	80003ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003a8:	f000 f8f8 	bl	800059c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003ac:	4b05      	ldr	r3, [pc, #20]	; (80003c4 <MX_I2C1_Init+0x74>)
 80003ae:	2100      	movs	r1, #0
 80003b0:	0018      	movs	r0, r3
 80003b2:	f001 f97f 	bl	80016b4 <HAL_I2CEx_ConfigDigitalFilter>
 80003b6:	1e03      	subs	r3, r0, #0
 80003b8:	d001      	beq.n	80003be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003ba:	f000 f8ef 	bl	800059c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003be:	46c0      	nop			; (mov r8, r8)
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	20000048 	.word	0x20000048
 80003c8:	40005400 	.word	0x40005400
 80003cc:	2000090e 	.word	0x2000090e

080003d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d0:	b590      	push	{r4, r7, lr}
 80003d2:	b08b      	sub	sp, #44	; 0x2c
 80003d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d6:	2414      	movs	r4, #20
 80003d8:	193b      	adds	r3, r7, r4
 80003da:	0018      	movs	r0, r3
 80003dc:	2314      	movs	r3, #20
 80003de:	001a      	movs	r2, r3
 80003e0:	2100      	movs	r1, #0
 80003e2:	f001 ff01 	bl	80021e8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003e6:	4b34      	ldr	r3, [pc, #208]	; (80004b8 <MX_GPIO_Init+0xe8>)
 80003e8:	695a      	ldr	r2, [r3, #20]
 80003ea:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <MX_GPIO_Init+0xe8>)
 80003ec:	2180      	movs	r1, #128	; 0x80
 80003ee:	03c9      	lsls	r1, r1, #15
 80003f0:	430a      	orrs	r2, r1
 80003f2:	615a      	str	r2, [r3, #20]
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <MX_GPIO_Init+0xe8>)
 80003f6:	695a      	ldr	r2, [r3, #20]
 80003f8:	2380      	movs	r3, #128	; 0x80
 80003fa:	03db      	lsls	r3, r3, #15
 80003fc:	4013      	ands	r3, r2
 80003fe:	613b      	str	r3, [r7, #16]
 8000400:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000402:	4b2d      	ldr	r3, [pc, #180]	; (80004b8 <MX_GPIO_Init+0xe8>)
 8000404:	695a      	ldr	r2, [r3, #20]
 8000406:	4b2c      	ldr	r3, [pc, #176]	; (80004b8 <MX_GPIO_Init+0xe8>)
 8000408:	2180      	movs	r1, #128	; 0x80
 800040a:	0289      	lsls	r1, r1, #10
 800040c:	430a      	orrs	r2, r1
 800040e:	615a      	str	r2, [r3, #20]
 8000410:	4b29      	ldr	r3, [pc, #164]	; (80004b8 <MX_GPIO_Init+0xe8>)
 8000412:	695a      	ldr	r2, [r3, #20]
 8000414:	2380      	movs	r3, #128	; 0x80
 8000416:	029b      	lsls	r3, r3, #10
 8000418:	4013      	ands	r3, r2
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800041e:	4b26      	ldr	r3, [pc, #152]	; (80004b8 <MX_GPIO_Init+0xe8>)
 8000420:	695a      	ldr	r2, [r3, #20]
 8000422:	4b25      	ldr	r3, [pc, #148]	; (80004b8 <MX_GPIO_Init+0xe8>)
 8000424:	2180      	movs	r1, #128	; 0x80
 8000426:	0309      	lsls	r1, r1, #12
 8000428:	430a      	orrs	r2, r1
 800042a:	615a      	str	r2, [r3, #20]
 800042c:	4b22      	ldr	r3, [pc, #136]	; (80004b8 <MX_GPIO_Init+0xe8>)
 800042e:	695a      	ldr	r2, [r3, #20]
 8000430:	2380      	movs	r3, #128	; 0x80
 8000432:	031b      	lsls	r3, r3, #12
 8000434:	4013      	ands	r3, r2
 8000436:	60bb      	str	r3, [r7, #8]
 8000438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800043a:	4b1f      	ldr	r3, [pc, #124]	; (80004b8 <MX_GPIO_Init+0xe8>)
 800043c:	695a      	ldr	r2, [r3, #20]
 800043e:	4b1e      	ldr	r3, [pc, #120]	; (80004b8 <MX_GPIO_Init+0xe8>)
 8000440:	2180      	movs	r1, #128	; 0x80
 8000442:	02c9      	lsls	r1, r1, #11
 8000444:	430a      	orrs	r2, r1
 8000446:	615a      	str	r2, [r3, #20]
 8000448:	4b1b      	ldr	r3, [pc, #108]	; (80004b8 <MX_GPIO_Init+0xe8>)
 800044a:	695a      	ldr	r2, [r3, #20]
 800044c:	2380      	movs	r3, #128	; 0x80
 800044e:	02db      	lsls	r3, r3, #11
 8000450:	4013      	ands	r3, r2
 8000452:	607b      	str	r3, [r7, #4]
 8000454:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000456:	23c0      	movs	r3, #192	; 0xc0
 8000458:	009b      	lsls	r3, r3, #2
 800045a:	4818      	ldr	r0, [pc, #96]	; (80004bc <MX_GPIO_Init+0xec>)
 800045c:	2200      	movs	r2, #0
 800045e:	0019      	movs	r1, r3
 8000460:	f000 fc06 	bl	8000c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000464:	193b      	adds	r3, r7, r4
 8000466:	2201      	movs	r2, #1
 8000468:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800046a:	193b      	adds	r3, r7, r4
 800046c:	2290      	movs	r2, #144	; 0x90
 800046e:	0352      	lsls	r2, r2, #13
 8000470:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000472:	193b      	adds	r3, r7, r4
 8000474:	2200      	movs	r2, #0
 8000476:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000478:	193a      	adds	r2, r7, r4
 800047a:	2390      	movs	r3, #144	; 0x90
 800047c:	05db      	lsls	r3, r3, #23
 800047e:	0011      	movs	r1, r2
 8000480:	0018      	movs	r0, r3
 8000482:	f000 fa85 	bl	8000990 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8000486:	0021      	movs	r1, r4
 8000488:	187b      	adds	r3, r7, r1
 800048a:	22c0      	movs	r2, #192	; 0xc0
 800048c:	0092      	lsls	r2, r2, #2
 800048e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000490:	187b      	adds	r3, r7, r1
 8000492:	2201      	movs	r2, #1
 8000494:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000496:	187b      	adds	r3, r7, r1
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049c:	187b      	adds	r3, r7, r1
 800049e:	2200      	movs	r2, #0
 80004a0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004a2:	187b      	adds	r3, r7, r1
 80004a4:	4a05      	ldr	r2, [pc, #20]	; (80004bc <MX_GPIO_Init+0xec>)
 80004a6:	0019      	movs	r1, r3
 80004a8:	0010      	movs	r0, r2
 80004aa:	f000 fa71 	bl	8000990 <HAL_GPIO_Init>

}
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	46bd      	mov	sp, r7
 80004b2:	b00b      	add	sp, #44	; 0x2c
 80004b4:	bd90      	pop	{r4, r7, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	40021000 	.word	0x40021000
 80004bc:	48000800 	.word	0x48000800

080004c0 <Read_BQ34110>:

/* USER CODE BEGIN 4 */
void Read_BQ34110(I2C_HandleTypeDef *hi2c, Command_typedef command, uint8_t *rcv_data, uint16_t size)
{
 80004c0:	b590      	push	{r4, r7, lr}
 80004c2:	b089      	sub	sp, #36	; 0x24
 80004c4:	af02      	add	r7, sp, #8
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	0008      	movs	r0, r1
 80004ca:	607a      	str	r2, [r7, #4]
 80004cc:	0019      	movs	r1, r3
 80004ce:	240b      	movs	r4, #11
 80004d0:	193b      	adds	r3, r7, r4
 80004d2:	1c02      	adds	r2, r0, #0
 80004d4:	701a      	strb	r2, [r3, #0]
 80004d6:	2308      	movs	r3, #8
 80004d8:	18fb      	adds	r3, r7, r3
 80004da:	1c0a      	adds	r2, r1, #0
 80004dc:	801a      	strh	r2, [r3, #0]
	uint8_t temp = command;
 80004de:	2117      	movs	r1, #23
 80004e0:	187b      	adds	r3, r7, r1
 80004e2:	193a      	adds	r2, r7, r4
 80004e4:	7812      	ldrb	r2, [r2, #0]
 80004e6:	701a      	strb	r2, [r3, #0]
	 if( HAL_I2C_Master_Transmit(hi2c, BQ34110, (uint8_t*)&temp, 1, HAL_MAX_DELAY) != HAL_OK)
 80004e8:	187a      	adds	r2, r7, r1
 80004ea:	68f8      	ldr	r0, [r7, #12]
 80004ec:	2301      	movs	r3, #1
 80004ee:	425b      	negs	r3, r3
 80004f0:	9300      	str	r3, [sp, #0]
 80004f2:	2301      	movs	r3, #1
 80004f4:	21aa      	movs	r1, #170	; 0xaa
 80004f6:	f000 fc89 	bl	8000e0c <HAL_I2C_Master_Transmit>
 80004fa:	1e03      	subs	r3, r0, #0
 80004fc:	d001      	beq.n	8000502 <Read_BQ34110+0x42>
	 {
		 Error_Handler();
 80004fe:	f000 f84d 	bl	800059c <Error_Handler>
	 }

	 if(  HAL_I2C_Master_Receive(hi2c, BQ34110, (uint8_t*)rcv_data, size, HAL_MAX_DELAY) != HAL_OK)
 8000502:	2308      	movs	r3, #8
 8000504:	18fb      	adds	r3, r7, r3
 8000506:	8819      	ldrh	r1, [r3, #0]
 8000508:	687a      	ldr	r2, [r7, #4]
 800050a:	68f8      	ldr	r0, [r7, #12]
 800050c:	2301      	movs	r3, #1
 800050e:	425b      	negs	r3, r3
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	000b      	movs	r3, r1
 8000514:	21aa      	movs	r1, #170	; 0xaa
 8000516:	f000 fd81 	bl	800101c <HAL_I2C_Master_Receive>
 800051a:	1e03      	subs	r3, r0, #0
 800051c:	d001      	beq.n	8000522 <Read_BQ34110+0x62>
	 {
		 Error_Handler();
 800051e:	f000 f83d 	bl	800059c <Error_Handler>
	 }
}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	46bd      	mov	sp, r7
 8000526:	b007      	add	sp, #28
 8000528:	bd90      	pop	{r4, r7, pc}
	...

0800052c <Transmit_SubCommand>:
void Transmit_SubCommand(I2C_HandleTypeDef *hi2c,Command_typedef command , Sub_typedef subCommand)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af02      	add	r7, sp, #8
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	0008      	movs	r0, r1
 8000536:	0011      	movs	r1, r2
 8000538:	1cfb      	adds	r3, r7, #3
 800053a:	1c02      	adds	r2, r0, #0
 800053c:	701a      	strb	r2, [r3, #0]
 800053e:	003b      	movs	r3, r7
 8000540:	1c0a      	adds	r2, r1, #0
 8000542:	801a      	strh	r2, [r3, #0]
	uint8_t trans_data[3] = {0};
 8000544:	200c      	movs	r0, #12
 8000546:	183b      	adds	r3, r7, r0
 8000548:	4a13      	ldr	r2, [pc, #76]	; (8000598 <Transmit_SubCommand+0x6c>)
 800054a:	8812      	ldrh	r2, [r2, #0]
 800054c:	801a      	strh	r2, [r3, #0]
 800054e:	2202      	movs	r2, #2
 8000550:	2100      	movs	r1, #0
 8000552:	5499      	strb	r1, [r3, r2]
	trans_data[0] = command;
 8000554:	0001      	movs	r1, r0
 8000556:	187b      	adds	r3, r7, r1
 8000558:	1cfa      	adds	r2, r7, #3
 800055a:	7812      	ldrb	r2, [r2, #0]
 800055c:	701a      	strb	r2, [r3, #0]
	trans_data[1] = subCommand & 0x00FF;
 800055e:	003b      	movs	r3, r7
 8000560:	881b      	ldrh	r3, [r3, #0]
 8000562:	b2da      	uxtb	r2, r3
 8000564:	187b      	adds	r3, r7, r1
 8000566:	705a      	strb	r2, [r3, #1]
	trans_data[2] = subCommand >> 8;
 8000568:	003b      	movs	r3, r7
 800056a:	881b      	ldrh	r3, [r3, #0]
 800056c:	0a1b      	lsrs	r3, r3, #8
 800056e:	b29b      	uxth	r3, r3
 8000570:	b2da      	uxtb	r2, r3
 8000572:	187b      	adds	r3, r7, r1
 8000574:	709a      	strb	r2, [r3, #2]
	 if( HAL_I2C_Master_Transmit(hi2c, BQ34110, (uint8_t*)trans_data, 3, HAL_MAX_DELAY) != HAL_OK)
 8000576:	187a      	adds	r2, r7, r1
 8000578:	6878      	ldr	r0, [r7, #4]
 800057a:	2301      	movs	r3, #1
 800057c:	425b      	negs	r3, r3
 800057e:	9300      	str	r3, [sp, #0]
 8000580:	2303      	movs	r3, #3
 8000582:	21aa      	movs	r1, #170	; 0xaa
 8000584:	f000 fc42 	bl	8000e0c <HAL_I2C_Master_Transmit>
 8000588:	1e03      	subs	r3, r0, #0
 800058a:	d001      	beq.n	8000590 <Transmit_SubCommand+0x64>
	 {
		 Error_Handler();
 800058c:	f000 f806 	bl	800059c <Error_Handler>
	 }

}
 8000590:	46c0      	nop			; (mov r8, r8)
 8000592:	46bd      	mov	sp, r7
 8000594:	b004      	add	sp, #16
 8000596:	bd80      	pop	{r7, pc}
 8000598:	08002210 	.word	0x08002210

0800059c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a0:	b672      	cpsid	i
}
 80005a2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a4:	e7fe      	b.n	80005a4 <Error_Handler+0x8>
	...

080005a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ae:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <HAL_MspInit+0x44>)
 80005b0:	699a      	ldr	r2, [r3, #24]
 80005b2:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <HAL_MspInit+0x44>)
 80005b4:	2101      	movs	r1, #1
 80005b6:	430a      	orrs	r2, r1
 80005b8:	619a      	str	r2, [r3, #24]
 80005ba:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <HAL_MspInit+0x44>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	2201      	movs	r2, #1
 80005c0:	4013      	ands	r3, r2
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <HAL_MspInit+0x44>)
 80005c8:	69da      	ldr	r2, [r3, #28]
 80005ca:	4b08      	ldr	r3, [pc, #32]	; (80005ec <HAL_MspInit+0x44>)
 80005cc:	2180      	movs	r1, #128	; 0x80
 80005ce:	0549      	lsls	r1, r1, #21
 80005d0:	430a      	orrs	r2, r1
 80005d2:	61da      	str	r2, [r3, #28]
 80005d4:	4b05      	ldr	r3, [pc, #20]	; (80005ec <HAL_MspInit+0x44>)
 80005d6:	69da      	ldr	r2, [r3, #28]
 80005d8:	2380      	movs	r3, #128	; 0x80
 80005da:	055b      	lsls	r3, r3, #21
 80005dc:	4013      	ands	r3, r2
 80005de:	603b      	str	r3, [r7, #0]
 80005e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	46bd      	mov	sp, r7
 80005e6:	b002      	add	sp, #8
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	40021000 	.word	0x40021000

080005f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005f0:	b590      	push	{r4, r7, lr}
 80005f2:	b08b      	sub	sp, #44	; 0x2c
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f8:	2414      	movs	r4, #20
 80005fa:	193b      	adds	r3, r7, r4
 80005fc:	0018      	movs	r0, r3
 80005fe:	2314      	movs	r3, #20
 8000600:	001a      	movs	r2, r3
 8000602:	2100      	movs	r1, #0
 8000604:	f001 fdf0 	bl	80021e8 <memset>
  if(hi2c->Instance==I2C1)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a1c      	ldr	r2, [pc, #112]	; (8000680 <HAL_I2C_MspInit+0x90>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d131      	bne.n	8000676 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000612:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <HAL_I2C_MspInit+0x94>)
 8000614:	695a      	ldr	r2, [r3, #20]
 8000616:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <HAL_I2C_MspInit+0x94>)
 8000618:	2180      	movs	r1, #128	; 0x80
 800061a:	02c9      	lsls	r1, r1, #11
 800061c:	430a      	orrs	r2, r1
 800061e:	615a      	str	r2, [r3, #20]
 8000620:	4b18      	ldr	r3, [pc, #96]	; (8000684 <HAL_I2C_MspInit+0x94>)
 8000622:	695a      	ldr	r2, [r3, #20]
 8000624:	2380      	movs	r3, #128	; 0x80
 8000626:	02db      	lsls	r3, r3, #11
 8000628:	4013      	ands	r3, r2
 800062a:	613b      	str	r3, [r7, #16]
 800062c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800062e:	0021      	movs	r1, r4
 8000630:	187b      	adds	r3, r7, r1
 8000632:	22c0      	movs	r2, #192	; 0xc0
 8000634:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000636:	187b      	adds	r3, r7, r1
 8000638:	2212      	movs	r2, #18
 800063a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	187b      	adds	r3, r7, r1
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000642:	187b      	adds	r3, r7, r1
 8000644:	2203      	movs	r2, #3
 8000646:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000648:	187b      	adds	r3, r7, r1
 800064a:	2201      	movs	r2, #1
 800064c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800064e:	187b      	adds	r3, r7, r1
 8000650:	4a0d      	ldr	r2, [pc, #52]	; (8000688 <HAL_I2C_MspInit+0x98>)
 8000652:	0019      	movs	r1, r3
 8000654:	0010      	movs	r0, r2
 8000656:	f000 f99b 	bl	8000990 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800065a:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <HAL_I2C_MspInit+0x94>)
 800065c:	69da      	ldr	r2, [r3, #28]
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <HAL_I2C_MspInit+0x94>)
 8000660:	2180      	movs	r1, #128	; 0x80
 8000662:	0389      	lsls	r1, r1, #14
 8000664:	430a      	orrs	r2, r1
 8000666:	61da      	str	r2, [r3, #28]
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <HAL_I2C_MspInit+0x94>)
 800066a:	69da      	ldr	r2, [r3, #28]
 800066c:	2380      	movs	r3, #128	; 0x80
 800066e:	039b      	lsls	r3, r3, #14
 8000670:	4013      	ands	r3, r2
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	46bd      	mov	sp, r7
 800067a:	b00b      	add	sp, #44	; 0x2c
 800067c:	bd90      	pop	{r4, r7, pc}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	40005400 	.word	0x40005400
 8000684:	40021000 	.word	0x40021000
 8000688:	48000400 	.word	0x48000400

0800068c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000690:	e7fe      	b.n	8000690 <NMI_Handler+0x4>

08000692 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000696:	e7fe      	b.n	8000696 <HardFault_Handler+0x4>

08000698 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800069c:	46c0      	nop			; (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006b0:	f000 f87a 	bl	80007a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006b4:	46c0      	nop			; (mov r8, r8)
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006c4:	480d      	ldr	r0, [pc, #52]	; (80006fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006c6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006c8:	480d      	ldr	r0, [pc, #52]	; (8000700 <LoopForever+0x6>)
  ldr r1, =_edata
 80006ca:	490e      	ldr	r1, [pc, #56]	; (8000704 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006cc:	4a0e      	ldr	r2, [pc, #56]	; (8000708 <LoopForever+0xe>)
  movs r3, #0
 80006ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d0:	e002      	b.n	80006d8 <LoopCopyDataInit>

080006d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006d6:	3304      	adds	r3, #4

080006d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006dc:	d3f9      	bcc.n	80006d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006de:	4a0b      	ldr	r2, [pc, #44]	; (800070c <LoopForever+0x12>)
  ldr r4, =_ebss
 80006e0:	4c0b      	ldr	r4, [pc, #44]	; (8000710 <LoopForever+0x16>)
  movs r3, #0
 80006e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e4:	e001      	b.n	80006ea <LoopFillZerobss>

080006e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006e8:	3204      	adds	r2, #4

080006ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006ec:	d3fb      	bcc.n	80006e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006ee:	f7ff ffe4 	bl	80006ba <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80006f2:	f001 fd55 	bl	80021a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006f6:	f7ff fd93 	bl	8000220 <main>

080006fa <LoopForever>:

LoopForever:
    b LoopForever
 80006fa:	e7fe      	b.n	80006fa <LoopForever>
  ldr   r0, =_estack
 80006fc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000704:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000708:	0800224c 	.word	0x0800224c
  ldr r2, =_sbss
 800070c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000710:	20000098 	.word	0x20000098

08000714 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000714:	e7fe      	b.n	8000714 <ADC1_COMP_IRQHandler>
	...

08000718 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <HAL_Init+0x24>)
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <HAL_Init+0x24>)
 8000722:	2110      	movs	r1, #16
 8000724:	430a      	orrs	r2, r1
 8000726:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000728:	2000      	movs	r0, #0
 800072a:	f000 f809 	bl	8000740 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800072e:	f7ff ff3b 	bl	80005a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000732:	2300      	movs	r3, #0
}
 8000734:	0018      	movs	r0, r3
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	40022000 	.word	0x40022000

08000740 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000740:	b590      	push	{r4, r7, lr}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <HAL_InitTick+0x5c>)
 800074a:	681c      	ldr	r4, [r3, #0]
 800074c:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <HAL_InitTick+0x60>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	0019      	movs	r1, r3
 8000752:	23fa      	movs	r3, #250	; 0xfa
 8000754:	0098      	lsls	r0, r3, #2
 8000756:	f7ff fcd7 	bl	8000108 <__udivsi3>
 800075a:	0003      	movs	r3, r0
 800075c:	0019      	movs	r1, r3
 800075e:	0020      	movs	r0, r4
 8000760:	f7ff fcd2 	bl	8000108 <__udivsi3>
 8000764:	0003      	movs	r3, r0
 8000766:	0018      	movs	r0, r3
 8000768:	f000 f905 	bl	8000976 <HAL_SYSTICK_Config>
 800076c:	1e03      	subs	r3, r0, #0
 800076e:	d001      	beq.n	8000774 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000770:	2301      	movs	r3, #1
 8000772:	e00f      	b.n	8000794 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2b03      	cmp	r3, #3
 8000778:	d80b      	bhi.n	8000792 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800077a:	6879      	ldr	r1, [r7, #4]
 800077c:	2301      	movs	r3, #1
 800077e:	425b      	negs	r3, r3
 8000780:	2200      	movs	r2, #0
 8000782:	0018      	movs	r0, r3
 8000784:	f000 f8e2 	bl	800094c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <HAL_InitTick+0x64>)
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800078e:	2300      	movs	r3, #0
 8000790:	e000      	b.n	8000794 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000792:	2301      	movs	r3, #1
}
 8000794:	0018      	movs	r0, r3
 8000796:	46bd      	mov	sp, r7
 8000798:	b003      	add	sp, #12
 800079a:	bd90      	pop	{r4, r7, pc}
 800079c:	20000000 	.word	0x20000000
 80007a0:	20000008 	.word	0x20000008
 80007a4:	20000004 	.word	0x20000004

080007a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007ac:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <HAL_IncTick+0x1c>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	001a      	movs	r2, r3
 80007b2:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <HAL_IncTick+0x20>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	18d2      	adds	r2, r2, r3
 80007b8:	4b03      	ldr	r3, [pc, #12]	; (80007c8 <HAL_IncTick+0x20>)
 80007ba:	601a      	str	r2, [r3, #0]
}
 80007bc:	46c0      	nop			; (mov r8, r8)
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	20000008 	.word	0x20000008
 80007c8:	20000094 	.word	0x20000094

080007cc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  return uwTick;
 80007d0:	4b02      	ldr	r3, [pc, #8]	; (80007dc <HAL_GetTick+0x10>)
 80007d2:	681b      	ldr	r3, [r3, #0]
}
 80007d4:	0018      	movs	r0, r3
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	20000094 	.word	0x20000094

080007e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007e8:	f7ff fff0 	bl	80007cc <HAL_GetTick>
 80007ec:	0003      	movs	r3, r0
 80007ee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	3301      	adds	r3, #1
 80007f8:	d005      	beq.n	8000806 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007fa:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <HAL_Delay+0x44>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	001a      	movs	r2, r3
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	189b      	adds	r3, r3, r2
 8000804:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	f7ff ffe0 	bl	80007cc <HAL_GetTick>
 800080c:	0002      	movs	r2, r0
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	1ad3      	subs	r3, r2, r3
 8000812:	68fa      	ldr	r2, [r7, #12]
 8000814:	429a      	cmp	r2, r3
 8000816:	d8f7      	bhi.n	8000808 <HAL_Delay+0x28>
  {
  }
}
 8000818:	46c0      	nop			; (mov r8, r8)
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	46bd      	mov	sp, r7
 800081e:	b004      	add	sp, #16
 8000820:	bd80      	pop	{r7, pc}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	20000008 	.word	0x20000008

08000828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	0002      	movs	r2, r0
 8000830:	6039      	str	r1, [r7, #0]
 8000832:	1dfb      	adds	r3, r7, #7
 8000834:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000836:	1dfb      	adds	r3, r7, #7
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b7f      	cmp	r3, #127	; 0x7f
 800083c:	d828      	bhi.n	8000890 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800083e:	4a2f      	ldr	r2, [pc, #188]	; (80008fc <__NVIC_SetPriority+0xd4>)
 8000840:	1dfb      	adds	r3, r7, #7
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b25b      	sxtb	r3, r3
 8000846:	089b      	lsrs	r3, r3, #2
 8000848:	33c0      	adds	r3, #192	; 0xc0
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	589b      	ldr	r3, [r3, r2]
 800084e:	1dfa      	adds	r2, r7, #7
 8000850:	7812      	ldrb	r2, [r2, #0]
 8000852:	0011      	movs	r1, r2
 8000854:	2203      	movs	r2, #3
 8000856:	400a      	ands	r2, r1
 8000858:	00d2      	lsls	r2, r2, #3
 800085a:	21ff      	movs	r1, #255	; 0xff
 800085c:	4091      	lsls	r1, r2
 800085e:	000a      	movs	r2, r1
 8000860:	43d2      	mvns	r2, r2
 8000862:	401a      	ands	r2, r3
 8000864:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	019b      	lsls	r3, r3, #6
 800086a:	22ff      	movs	r2, #255	; 0xff
 800086c:	401a      	ands	r2, r3
 800086e:	1dfb      	adds	r3, r7, #7
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	0018      	movs	r0, r3
 8000874:	2303      	movs	r3, #3
 8000876:	4003      	ands	r3, r0
 8000878:	00db      	lsls	r3, r3, #3
 800087a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800087c:	481f      	ldr	r0, [pc, #124]	; (80008fc <__NVIC_SetPriority+0xd4>)
 800087e:	1dfb      	adds	r3, r7, #7
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	b25b      	sxtb	r3, r3
 8000884:	089b      	lsrs	r3, r3, #2
 8000886:	430a      	orrs	r2, r1
 8000888:	33c0      	adds	r3, #192	; 0xc0
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800088e:	e031      	b.n	80008f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000890:	4a1b      	ldr	r2, [pc, #108]	; (8000900 <__NVIC_SetPriority+0xd8>)
 8000892:	1dfb      	adds	r3, r7, #7
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	0019      	movs	r1, r3
 8000898:	230f      	movs	r3, #15
 800089a:	400b      	ands	r3, r1
 800089c:	3b08      	subs	r3, #8
 800089e:	089b      	lsrs	r3, r3, #2
 80008a0:	3306      	adds	r3, #6
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	18d3      	adds	r3, r2, r3
 80008a6:	3304      	adds	r3, #4
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	1dfa      	adds	r2, r7, #7
 80008ac:	7812      	ldrb	r2, [r2, #0]
 80008ae:	0011      	movs	r1, r2
 80008b0:	2203      	movs	r2, #3
 80008b2:	400a      	ands	r2, r1
 80008b4:	00d2      	lsls	r2, r2, #3
 80008b6:	21ff      	movs	r1, #255	; 0xff
 80008b8:	4091      	lsls	r1, r2
 80008ba:	000a      	movs	r2, r1
 80008bc:	43d2      	mvns	r2, r2
 80008be:	401a      	ands	r2, r3
 80008c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	019b      	lsls	r3, r3, #6
 80008c6:	22ff      	movs	r2, #255	; 0xff
 80008c8:	401a      	ands	r2, r3
 80008ca:	1dfb      	adds	r3, r7, #7
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	0018      	movs	r0, r3
 80008d0:	2303      	movs	r3, #3
 80008d2:	4003      	ands	r3, r0
 80008d4:	00db      	lsls	r3, r3, #3
 80008d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008d8:	4809      	ldr	r0, [pc, #36]	; (8000900 <__NVIC_SetPriority+0xd8>)
 80008da:	1dfb      	adds	r3, r7, #7
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	001c      	movs	r4, r3
 80008e0:	230f      	movs	r3, #15
 80008e2:	4023      	ands	r3, r4
 80008e4:	3b08      	subs	r3, #8
 80008e6:	089b      	lsrs	r3, r3, #2
 80008e8:	430a      	orrs	r2, r1
 80008ea:	3306      	adds	r3, #6
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	18c3      	adds	r3, r0, r3
 80008f0:	3304      	adds	r3, #4
 80008f2:	601a      	str	r2, [r3, #0]
}
 80008f4:	46c0      	nop			; (mov r8, r8)
 80008f6:	46bd      	mov	sp, r7
 80008f8:	b003      	add	sp, #12
 80008fa:	bd90      	pop	{r4, r7, pc}
 80008fc:	e000e100 	.word	0xe000e100
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	1e5a      	subs	r2, r3, #1
 8000910:	2380      	movs	r3, #128	; 0x80
 8000912:	045b      	lsls	r3, r3, #17
 8000914:	429a      	cmp	r2, r3
 8000916:	d301      	bcc.n	800091c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000918:	2301      	movs	r3, #1
 800091a:	e010      	b.n	800093e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800091c:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <SysTick_Config+0x44>)
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	3a01      	subs	r2, #1
 8000922:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000924:	2301      	movs	r3, #1
 8000926:	425b      	negs	r3, r3
 8000928:	2103      	movs	r1, #3
 800092a:	0018      	movs	r0, r3
 800092c:	f7ff ff7c 	bl	8000828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <SysTick_Config+0x44>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000936:	4b04      	ldr	r3, [pc, #16]	; (8000948 <SysTick_Config+0x44>)
 8000938:	2207      	movs	r2, #7
 800093a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800093c:	2300      	movs	r3, #0
}
 800093e:	0018      	movs	r0, r3
 8000940:	46bd      	mov	sp, r7
 8000942:	b002      	add	sp, #8
 8000944:	bd80      	pop	{r7, pc}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	e000e010 	.word	0xe000e010

0800094c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	60b9      	str	r1, [r7, #8]
 8000954:	607a      	str	r2, [r7, #4]
 8000956:	210f      	movs	r1, #15
 8000958:	187b      	adds	r3, r7, r1
 800095a:	1c02      	adds	r2, r0, #0
 800095c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800095e:	68ba      	ldr	r2, [r7, #8]
 8000960:	187b      	adds	r3, r7, r1
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	b25b      	sxtb	r3, r3
 8000966:	0011      	movs	r1, r2
 8000968:	0018      	movs	r0, r3
 800096a:	f7ff ff5d 	bl	8000828 <__NVIC_SetPriority>
}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	46bd      	mov	sp, r7
 8000972:	b004      	add	sp, #16
 8000974:	bd80      	pop	{r7, pc}

08000976 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	b082      	sub	sp, #8
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	0018      	movs	r0, r3
 8000982:	f7ff ffbf 	bl	8000904 <SysTick_Config>
 8000986:	0003      	movs	r3, r0
}
 8000988:	0018      	movs	r0, r3
 800098a:	46bd      	mov	sp, r7
 800098c:	b002      	add	sp, #8
 800098e:	bd80      	pop	{r7, pc}

08000990 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800099e:	e14f      	b.n	8000c40 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2101      	movs	r1, #1
 80009a6:	697a      	ldr	r2, [r7, #20]
 80009a8:	4091      	lsls	r1, r2
 80009aa:	000a      	movs	r2, r1
 80009ac:	4013      	ands	r3, r2
 80009ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d100      	bne.n	80009b8 <HAL_GPIO_Init+0x28>
 80009b6:	e140      	b.n	8000c3a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	2203      	movs	r2, #3
 80009be:	4013      	ands	r3, r2
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d005      	beq.n	80009d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	2203      	movs	r2, #3
 80009ca:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009cc:	2b02      	cmp	r3, #2
 80009ce:	d130      	bne.n	8000a32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	689b      	ldr	r3, [r3, #8]
 80009d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	2203      	movs	r2, #3
 80009dc:	409a      	lsls	r2, r3
 80009de:	0013      	movs	r3, r2
 80009e0:	43da      	mvns	r2, r3
 80009e2:	693b      	ldr	r3, [r7, #16]
 80009e4:	4013      	ands	r3, r2
 80009e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	68da      	ldr	r2, [r3, #12]
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	409a      	lsls	r2, r3
 80009f2:	0013      	movs	r3, r2
 80009f4:	693a      	ldr	r2, [r7, #16]
 80009f6:	4313      	orrs	r3, r2
 80009f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	693a      	ldr	r2, [r7, #16]
 80009fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a06:	2201      	movs	r2, #1
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	409a      	lsls	r2, r3
 8000a0c:	0013      	movs	r3, r2
 8000a0e:	43da      	mvns	r2, r3
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	4013      	ands	r3, r2
 8000a14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	091b      	lsrs	r3, r3, #4
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	401a      	ands	r2, r3
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	409a      	lsls	r2, r3
 8000a24:	0013      	movs	r3, r2
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	2203      	movs	r2, #3
 8000a38:	4013      	ands	r3, r2
 8000a3a:	2b03      	cmp	r3, #3
 8000a3c:	d017      	beq.n	8000a6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	68db      	ldr	r3, [r3, #12]
 8000a42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	2203      	movs	r2, #3
 8000a4a:	409a      	lsls	r2, r3
 8000a4c:	0013      	movs	r3, r2
 8000a4e:	43da      	mvns	r2, r3
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	4013      	ands	r3, r2
 8000a54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	689a      	ldr	r2, [r3, #8]
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	409a      	lsls	r2, r3
 8000a60:	0013      	movs	r3, r2
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	2203      	movs	r2, #3
 8000a74:	4013      	ands	r3, r2
 8000a76:	2b02      	cmp	r3, #2
 8000a78:	d123      	bne.n	8000ac2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	08da      	lsrs	r2, r3, #3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	3208      	adds	r2, #8
 8000a82:	0092      	lsls	r2, r2, #2
 8000a84:	58d3      	ldr	r3, [r2, r3]
 8000a86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	2207      	movs	r2, #7
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	220f      	movs	r2, #15
 8000a92:	409a      	lsls	r2, r3
 8000a94:	0013      	movs	r3, r2
 8000a96:	43da      	mvns	r2, r3
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	691a      	ldr	r2, [r3, #16]
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	2107      	movs	r1, #7
 8000aa6:	400b      	ands	r3, r1
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	409a      	lsls	r2, r3
 8000aac:	0013      	movs	r3, r2
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	08da      	lsrs	r2, r3, #3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	3208      	adds	r2, #8
 8000abc:	0092      	lsls	r2, r2, #2
 8000abe:	6939      	ldr	r1, [r7, #16]
 8000ac0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	2203      	movs	r2, #3
 8000ace:	409a      	lsls	r2, r3
 8000ad0:	0013      	movs	r3, r2
 8000ad2:	43da      	mvns	r2, r3
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	2203      	movs	r2, #3
 8000ae0:	401a      	ands	r2, r3
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	409a      	lsls	r2, r3
 8000ae8:	0013      	movs	r3, r2
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685a      	ldr	r2, [r3, #4]
 8000afa:	23c0      	movs	r3, #192	; 0xc0
 8000afc:	029b      	lsls	r3, r3, #10
 8000afe:	4013      	ands	r3, r2
 8000b00:	d100      	bne.n	8000b04 <HAL_GPIO_Init+0x174>
 8000b02:	e09a      	b.n	8000c3a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b04:	4b54      	ldr	r3, [pc, #336]	; (8000c58 <HAL_GPIO_Init+0x2c8>)
 8000b06:	699a      	ldr	r2, [r3, #24]
 8000b08:	4b53      	ldr	r3, [pc, #332]	; (8000c58 <HAL_GPIO_Init+0x2c8>)
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	619a      	str	r2, [r3, #24]
 8000b10:	4b51      	ldr	r3, [pc, #324]	; (8000c58 <HAL_GPIO_Init+0x2c8>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	2201      	movs	r2, #1
 8000b16:	4013      	ands	r3, r2
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b1c:	4a4f      	ldr	r2, [pc, #316]	; (8000c5c <HAL_GPIO_Init+0x2cc>)
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	089b      	lsrs	r3, r3, #2
 8000b22:	3302      	adds	r3, #2
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	589b      	ldr	r3, [r3, r2]
 8000b28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	2203      	movs	r2, #3
 8000b2e:	4013      	ands	r3, r2
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	220f      	movs	r2, #15
 8000b34:	409a      	lsls	r2, r3
 8000b36:	0013      	movs	r3, r2
 8000b38:	43da      	mvns	r2, r3
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	2390      	movs	r3, #144	; 0x90
 8000b44:	05db      	lsls	r3, r3, #23
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d013      	beq.n	8000b72 <HAL_GPIO_Init+0x1e2>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4a44      	ldr	r2, [pc, #272]	; (8000c60 <HAL_GPIO_Init+0x2d0>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d00d      	beq.n	8000b6e <HAL_GPIO_Init+0x1de>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4a43      	ldr	r2, [pc, #268]	; (8000c64 <HAL_GPIO_Init+0x2d4>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d007      	beq.n	8000b6a <HAL_GPIO_Init+0x1da>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4a42      	ldr	r2, [pc, #264]	; (8000c68 <HAL_GPIO_Init+0x2d8>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d101      	bne.n	8000b66 <HAL_GPIO_Init+0x1d6>
 8000b62:	2303      	movs	r3, #3
 8000b64:	e006      	b.n	8000b74 <HAL_GPIO_Init+0x1e4>
 8000b66:	2305      	movs	r3, #5
 8000b68:	e004      	b.n	8000b74 <HAL_GPIO_Init+0x1e4>
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	e002      	b.n	8000b74 <HAL_GPIO_Init+0x1e4>
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e000      	b.n	8000b74 <HAL_GPIO_Init+0x1e4>
 8000b72:	2300      	movs	r3, #0
 8000b74:	697a      	ldr	r2, [r7, #20]
 8000b76:	2103      	movs	r1, #3
 8000b78:	400a      	ands	r2, r1
 8000b7a:	0092      	lsls	r2, r2, #2
 8000b7c:	4093      	lsls	r3, r2
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b84:	4935      	ldr	r1, [pc, #212]	; (8000c5c <HAL_GPIO_Init+0x2cc>)
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	089b      	lsrs	r3, r3, #2
 8000b8a:	3302      	adds	r3, #2
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b92:	4b36      	ldr	r3, [pc, #216]	; (8000c6c <HAL_GPIO_Init+0x2dc>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	43da      	mvns	r2, r3
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685a      	ldr	r2, [r3, #4]
 8000ba6:	2380      	movs	r3, #128	; 0x80
 8000ba8:	025b      	lsls	r3, r3, #9
 8000baa:	4013      	ands	r3, r2
 8000bac:	d003      	beq.n	8000bb6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000bb6:	4b2d      	ldr	r3, [pc, #180]	; (8000c6c <HAL_GPIO_Init+0x2dc>)
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000bbc:	4b2b      	ldr	r3, [pc, #172]	; (8000c6c <HAL_GPIO_Init+0x2dc>)
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	43da      	mvns	r2, r3
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685a      	ldr	r2, [r3, #4]
 8000bd0:	2380      	movs	r3, #128	; 0x80
 8000bd2:	029b      	lsls	r3, r3, #10
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	d003      	beq.n	8000be0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000be0:	4b22      	ldr	r3, [pc, #136]	; (8000c6c <HAL_GPIO_Init+0x2dc>)
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000be6:	4b21      	ldr	r3, [pc, #132]	; (8000c6c <HAL_GPIO_Init+0x2dc>)
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	43da      	mvns	r2, r3
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685a      	ldr	r2, [r3, #4]
 8000bfa:	2380      	movs	r3, #128	; 0x80
 8000bfc:	035b      	lsls	r3, r3, #13
 8000bfe:	4013      	ands	r3, r2
 8000c00:	d003      	beq.n	8000c0a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c0a:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <HAL_GPIO_Init+0x2dc>)
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000c10:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <HAL_GPIO_Init+0x2dc>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	43da      	mvns	r2, r3
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685a      	ldr	r2, [r3, #4]
 8000c24:	2380      	movs	r3, #128	; 0x80
 8000c26:	039b      	lsls	r3, r3, #14
 8000c28:	4013      	ands	r3, r2
 8000c2a:	d003      	beq.n	8000c34 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c34:	4b0d      	ldr	r3, [pc, #52]	; (8000c6c <HAL_GPIO_Init+0x2dc>)
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	40da      	lsrs	r2, r3
 8000c48:	1e13      	subs	r3, r2, #0
 8000c4a:	d000      	beq.n	8000c4e <HAL_GPIO_Init+0x2be>
 8000c4c:	e6a8      	b.n	80009a0 <HAL_GPIO_Init+0x10>
  } 
}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	46c0      	nop			; (mov r8, r8)
 8000c52:	46bd      	mov	sp, r7
 8000c54:	b006      	add	sp, #24
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	40010000 	.word	0x40010000
 8000c60:	48000400 	.word	0x48000400
 8000c64:	48000800 	.word	0x48000800
 8000c68:	48000c00 	.word	0x48000c00
 8000c6c:	40010400 	.word	0x40010400

08000c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	0008      	movs	r0, r1
 8000c7a:	0011      	movs	r1, r2
 8000c7c:	1cbb      	adds	r3, r7, #2
 8000c7e:	1c02      	adds	r2, r0, #0
 8000c80:	801a      	strh	r2, [r3, #0]
 8000c82:	1c7b      	adds	r3, r7, #1
 8000c84:	1c0a      	adds	r2, r1, #0
 8000c86:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c88:	1c7b      	adds	r3, r7, #1
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d004      	beq.n	8000c9a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c90:	1cbb      	adds	r3, r7, #2
 8000c92:	881a      	ldrh	r2, [r3, #0]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c98:	e003      	b.n	8000ca2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c9a:	1cbb      	adds	r3, r7, #2
 8000c9c:	881a      	ldrh	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	b002      	add	sp, #8
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b084      	sub	sp, #16
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
 8000cb2:	000a      	movs	r2, r1
 8000cb4:	1cbb      	adds	r3, r7, #2
 8000cb6:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	695b      	ldr	r3, [r3, #20]
 8000cbc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000cbe:	1cbb      	adds	r3, r7, #2
 8000cc0:	881b      	ldrh	r3, [r3, #0]
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	041a      	lsls	r2, r3, #16
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	1cb9      	adds	r1, r7, #2
 8000cce:	8809      	ldrh	r1, [r1, #0]
 8000cd0:	400b      	ands	r3, r1
 8000cd2:	431a      	orrs	r2, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	619a      	str	r2, [r3, #24]
}
 8000cd8:	46c0      	nop			; (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	b004      	add	sp, #16
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d101      	bne.n	8000cf2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e082      	b.n	8000df8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2241      	movs	r2, #65	; 0x41
 8000cf6:	5c9b      	ldrb	r3, [r3, r2]
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d107      	bne.n	8000d0e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2240      	movs	r2, #64	; 0x40
 8000d02:	2100      	movs	r1, #0
 8000d04:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f7ff fc71 	bl	80005f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2241      	movs	r2, #65	; 0x41
 8000d12:	2124      	movs	r1, #36	; 0x24
 8000d14:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2101      	movs	r1, #1
 8000d22:	438a      	bics	r2, r1
 8000d24:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	685a      	ldr	r2, [r3, #4]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4934      	ldr	r1, [pc, #208]	; (8000e00 <HAL_I2C_Init+0x120>)
 8000d30:	400a      	ands	r2, r1
 8000d32:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	689a      	ldr	r2, [r3, #8]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4931      	ldr	r1, [pc, #196]	; (8000e04 <HAL_I2C_Init+0x124>)
 8000d40:	400a      	ands	r2, r1
 8000d42:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d108      	bne.n	8000d5e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	689a      	ldr	r2, [r3, #8]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2180      	movs	r1, #128	; 0x80
 8000d56:	0209      	lsls	r1, r1, #8
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	e007      	b.n	8000d6e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	689a      	ldr	r2, [r3, #8]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2184      	movs	r1, #132	; 0x84
 8000d68:	0209      	lsls	r1, r1, #8
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	68db      	ldr	r3, [r3, #12]
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d104      	bne.n	8000d80 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2280      	movs	r2, #128	; 0x80
 8000d7c:	0112      	lsls	r2, r2, #4
 8000d7e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	685a      	ldr	r2, [r3, #4]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	491f      	ldr	r1, [pc, #124]	; (8000e08 <HAL_I2C_Init+0x128>)
 8000d8c:	430a      	orrs	r2, r1
 8000d8e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	68da      	ldr	r2, [r3, #12]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	491a      	ldr	r1, [pc, #104]	; (8000e04 <HAL_I2C_Init+0x124>)
 8000d9c:	400a      	ands	r2, r1
 8000d9e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	691a      	ldr	r2, [r3, #16]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	695b      	ldr	r3, [r3, #20]
 8000da8:	431a      	orrs	r2, r3
 8000daa:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	430a      	orrs	r2, r1
 8000db8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	69d9      	ldr	r1, [r3, #28]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6a1a      	ldr	r2, [r3, #32]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2241      	movs	r2, #65	; 0x41
 8000de4:	2120      	movs	r1, #32
 8000de6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2200      	movs	r2, #0
 8000dec:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2242      	movs	r2, #66	; 0x42
 8000df2:	2100      	movs	r1, #0
 8000df4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000df6:	2300      	movs	r3, #0
}
 8000df8:	0018      	movs	r0, r3
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	b002      	add	sp, #8
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	f0ffffff 	.word	0xf0ffffff
 8000e04:	ffff7fff 	.word	0xffff7fff
 8000e08:	02008000 	.word	0x02008000

08000e0c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8000e0c:	b590      	push	{r4, r7, lr}
 8000e0e:	b089      	sub	sp, #36	; 0x24
 8000e10:	af02      	add	r7, sp, #8
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	0008      	movs	r0, r1
 8000e16:	607a      	str	r2, [r7, #4]
 8000e18:	0019      	movs	r1, r3
 8000e1a:	230a      	movs	r3, #10
 8000e1c:	18fb      	adds	r3, r7, r3
 8000e1e:	1c02      	adds	r2, r0, #0
 8000e20:	801a      	strh	r2, [r3, #0]
 8000e22:	2308      	movs	r3, #8
 8000e24:	18fb      	adds	r3, r7, r3
 8000e26:	1c0a      	adds	r2, r1, #0
 8000e28:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	2241      	movs	r2, #65	; 0x41
 8000e2e:	5c9b      	ldrb	r3, [r3, r2]
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	2b20      	cmp	r3, #32
 8000e34:	d000      	beq.n	8000e38 <HAL_I2C_Master_Transmit+0x2c>
 8000e36:	e0e7      	b.n	8001008 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2240      	movs	r2, #64	; 0x40
 8000e3c:	5c9b      	ldrb	r3, [r3, r2]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d101      	bne.n	8000e46 <HAL_I2C_Master_Transmit+0x3a>
 8000e42:	2302      	movs	r3, #2
 8000e44:	e0e1      	b.n	800100a <HAL_I2C_Master_Transmit+0x1fe>
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	2240      	movs	r2, #64	; 0x40
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000e4e:	f7ff fcbd 	bl	80007cc <HAL_GetTick>
 8000e52:	0003      	movs	r3, r0
 8000e54:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000e56:	2380      	movs	r3, #128	; 0x80
 8000e58:	0219      	lsls	r1, r3, #8
 8000e5a:	68f8      	ldr	r0, [r7, #12]
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	2319      	movs	r3, #25
 8000e62:	2201      	movs	r2, #1
 8000e64:	f000 fa04 	bl	8001270 <I2C_WaitOnFlagUntilTimeout>
 8000e68:	1e03      	subs	r3, r0, #0
 8000e6a:	d001      	beq.n	8000e70 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e0cc      	b.n	800100a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	2241      	movs	r2, #65	; 0x41
 8000e74:	2121      	movs	r1, #33	; 0x21
 8000e76:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	2242      	movs	r2, #66	; 0x42
 8000e7c:	2110      	movs	r1, #16
 8000e7e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	2200      	movs	r2, #0
 8000e84:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	2208      	movs	r2, #8
 8000e90:	18ba      	adds	r2, r7, r2
 8000e92:	8812      	ldrh	r2, [r2, #0]
 8000e94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	2bff      	cmp	r3, #255	; 0xff
 8000ea4:	d911      	bls.n	8000eca <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	22ff      	movs	r2, #255	; 0xff
 8000eaa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	2380      	movs	r3, #128	; 0x80
 8000eb4:	045c      	lsls	r4, r3, #17
 8000eb6:	230a      	movs	r3, #10
 8000eb8:	18fb      	adds	r3, r7, r3
 8000eba:	8819      	ldrh	r1, [r3, #0]
 8000ebc:	68f8      	ldr	r0, [r7, #12]
 8000ebe:	4b55      	ldr	r3, [pc, #340]	; (8001014 <HAL_I2C_Master_Transmit+0x208>)
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	0023      	movs	r3, r4
 8000ec4:	f000 fb74 	bl	80015b0 <I2C_TransferConfig>
 8000ec8:	e075      	b.n	8000fb6 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	2380      	movs	r3, #128	; 0x80
 8000edc:	049c      	lsls	r4, r3, #18
 8000ede:	230a      	movs	r3, #10
 8000ee0:	18fb      	adds	r3, r7, r3
 8000ee2:	8819      	ldrh	r1, [r3, #0]
 8000ee4:	68f8      	ldr	r0, [r7, #12]
 8000ee6:	4b4b      	ldr	r3, [pc, #300]	; (8001014 <HAL_I2C_Master_Transmit+0x208>)
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	0023      	movs	r3, r4
 8000eec:	f000 fb60 	bl	80015b0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8000ef0:	e061      	b.n	8000fb6 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ef2:	697a      	ldr	r2, [r7, #20]
 8000ef4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f000 f9f8 	bl	80012ee <I2C_WaitOnTXISFlagUntilTimeout>
 8000efe:	1e03      	subs	r3, r0, #0
 8000f00:	d001      	beq.n	8000f06 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e081      	b.n	800100a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0a:	781a      	ldrb	r2, [r3, #0]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f16:	1c5a      	adds	r2, r3, #1
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	3b01      	subs	r3, #1
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d03a      	beq.n	8000fb6 <HAL_I2C_Master_Transmit+0x1aa>
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d136      	bne.n	8000fb6 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000f48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f4a:	68f8      	ldr	r0, [r7, #12]
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	0013      	movs	r3, r2
 8000f52:	2200      	movs	r2, #0
 8000f54:	2180      	movs	r1, #128	; 0x80
 8000f56:	f000 f98b 	bl	8001270 <I2C_WaitOnFlagUntilTimeout>
 8000f5a:	1e03      	subs	r3, r0, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e053      	b.n	800100a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	2bff      	cmp	r3, #255	; 0xff
 8000f6a:	d911      	bls.n	8000f90 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	22ff      	movs	r2, #255	; 0xff
 8000f70:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	2380      	movs	r3, #128	; 0x80
 8000f7a:	045c      	lsls	r4, r3, #17
 8000f7c:	230a      	movs	r3, #10
 8000f7e:	18fb      	adds	r3, r7, r3
 8000f80:	8819      	ldrh	r1, [r3, #0]
 8000f82:	68f8      	ldr	r0, [r7, #12]
 8000f84:	2300      	movs	r3, #0
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	0023      	movs	r3, r4
 8000f8a:	f000 fb11 	bl	80015b0 <I2C_TransferConfig>
 8000f8e:	e012      	b.n	8000fb6 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	2380      	movs	r3, #128	; 0x80
 8000fa2:	049c      	lsls	r4, r3, #18
 8000fa4:	230a      	movs	r3, #10
 8000fa6:	18fb      	adds	r3, r7, r3
 8000fa8:	8819      	ldrh	r1, [r3, #0]
 8000faa:	68f8      	ldr	r0, [r7, #12]
 8000fac:	2300      	movs	r3, #0
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	0023      	movs	r3, r4
 8000fb2:	f000 fafd 	bl	80015b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d198      	bne.n	8000ef2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fc0:	697a      	ldr	r2, [r7, #20]
 8000fc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f000 f9d0 	bl	800136c <I2C_WaitOnSTOPFlagUntilTimeout>
 8000fcc:	1e03      	subs	r3, r0, #0
 8000fce:	d001      	beq.n	8000fd4 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e01a      	b.n	800100a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2220      	movs	r2, #32
 8000fda:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	685a      	ldr	r2, [r3, #4]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	490c      	ldr	r1, [pc, #48]	; (8001018 <HAL_I2C_Master_Transmit+0x20c>)
 8000fe8:	400a      	ands	r2, r1
 8000fea:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	2241      	movs	r2, #65	; 0x41
 8000ff0:	2120      	movs	r1, #32
 8000ff2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2242      	movs	r2, #66	; 0x42
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2240      	movs	r2, #64	; 0x40
 8001000:	2100      	movs	r1, #0
 8001002:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001004:	2300      	movs	r3, #0
 8001006:	e000      	b.n	800100a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001008:	2302      	movs	r3, #2
  }
}
 800100a:	0018      	movs	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	b007      	add	sp, #28
 8001010:	bd90      	pop	{r4, r7, pc}
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	80002000 	.word	0x80002000
 8001018:	fe00e800 	.word	0xfe00e800

0800101c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800101c:	b590      	push	{r4, r7, lr}
 800101e:	b089      	sub	sp, #36	; 0x24
 8001020:	af02      	add	r7, sp, #8
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	0008      	movs	r0, r1
 8001026:	607a      	str	r2, [r7, #4]
 8001028:	0019      	movs	r1, r3
 800102a:	230a      	movs	r3, #10
 800102c:	18fb      	adds	r3, r7, r3
 800102e:	1c02      	adds	r2, r0, #0
 8001030:	801a      	strh	r2, [r3, #0]
 8001032:	2308      	movs	r3, #8
 8001034:	18fb      	adds	r3, r7, r3
 8001036:	1c0a      	adds	r2, r1, #0
 8001038:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2241      	movs	r2, #65	; 0x41
 800103e:	5c9b      	ldrb	r3, [r3, r2]
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b20      	cmp	r3, #32
 8001044:	d000      	beq.n	8001048 <HAL_I2C_Master_Receive+0x2c>
 8001046:	e0e8      	b.n	800121a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2240      	movs	r2, #64	; 0x40
 800104c:	5c9b      	ldrb	r3, [r3, r2]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d101      	bne.n	8001056 <HAL_I2C_Master_Receive+0x3a>
 8001052:	2302      	movs	r3, #2
 8001054:	e0e2      	b.n	800121c <HAL_I2C_Master_Receive+0x200>
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	2240      	movs	r2, #64	; 0x40
 800105a:	2101      	movs	r1, #1
 800105c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800105e:	f7ff fbb5 	bl	80007cc <HAL_GetTick>
 8001062:	0003      	movs	r3, r0
 8001064:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001066:	2380      	movs	r3, #128	; 0x80
 8001068:	0219      	lsls	r1, r3, #8
 800106a:	68f8      	ldr	r0, [r7, #12]
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	2319      	movs	r3, #25
 8001072:	2201      	movs	r2, #1
 8001074:	f000 f8fc 	bl	8001270 <I2C_WaitOnFlagUntilTimeout>
 8001078:	1e03      	subs	r3, r0, #0
 800107a:	d001      	beq.n	8001080 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e0cd      	b.n	800121c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2241      	movs	r2, #65	; 0x41
 8001084:	2122      	movs	r1, #34	; 0x22
 8001086:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2242      	movs	r2, #66	; 0x42
 800108c:	2110      	movs	r1, #16
 800108e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	2200      	movs	r2, #0
 8001094:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	2208      	movs	r2, #8
 80010a0:	18ba      	adds	r2, r7, r2
 80010a2:	8812      	ldrh	r2, [r2, #0]
 80010a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	2200      	movs	r2, #0
 80010aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	2bff      	cmp	r3, #255	; 0xff
 80010b4:	d911      	bls.n	80010da <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	22ff      	movs	r2, #255	; 0xff
 80010ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	2380      	movs	r3, #128	; 0x80
 80010c4:	045c      	lsls	r4, r3, #17
 80010c6:	230a      	movs	r3, #10
 80010c8:	18fb      	adds	r3, r7, r3
 80010ca:	8819      	ldrh	r1, [r3, #0]
 80010cc:	68f8      	ldr	r0, [r7, #12]
 80010ce:	4b55      	ldr	r3, [pc, #340]	; (8001224 <HAL_I2C_Master_Receive+0x208>)
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	0023      	movs	r3, r4
 80010d4:	f000 fa6c 	bl	80015b0 <I2C_TransferConfig>
 80010d8:	e076      	b.n	80011c8 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010de:	b29a      	uxth	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	049c      	lsls	r4, r3, #18
 80010ee:	230a      	movs	r3, #10
 80010f0:	18fb      	adds	r3, r7, r3
 80010f2:	8819      	ldrh	r1, [r3, #0]
 80010f4:	68f8      	ldr	r0, [r7, #12]
 80010f6:	4b4b      	ldr	r3, [pc, #300]	; (8001224 <HAL_I2C_Master_Receive+0x208>)
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	0023      	movs	r3, r4
 80010fc:	f000 fa58 	bl	80015b0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001100:	e062      	b.n	80011c8 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001102:	697a      	ldr	r2, [r7, #20]
 8001104:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	0018      	movs	r0, r3
 800110a:	f000 f96b 	bl	80013e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800110e:	1e03      	subs	r3, r0, #0
 8001110:	d001      	beq.n	8001116 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e082      	b.n	800121c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001120:	b2d2      	uxtb	r2, r2
 8001122:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001128:	1c5a      	adds	r2, r3, #1
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001132:	3b01      	subs	r3, #1
 8001134:	b29a      	uxth	r2, r3
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800113e:	b29b      	uxth	r3, r3
 8001140:	3b01      	subs	r3, #1
 8001142:	b29a      	uxth	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800114c:	b29b      	uxth	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	d03a      	beq.n	80011c8 <HAL_I2C_Master_Receive+0x1ac>
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001156:	2b00      	cmp	r3, #0
 8001158:	d136      	bne.n	80011c8 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800115a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800115c:	68f8      	ldr	r0, [r7, #12]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	0013      	movs	r3, r2
 8001164:	2200      	movs	r2, #0
 8001166:	2180      	movs	r1, #128	; 0x80
 8001168:	f000 f882 	bl	8001270 <I2C_WaitOnFlagUntilTimeout>
 800116c:	1e03      	subs	r3, r0, #0
 800116e:	d001      	beq.n	8001174 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e053      	b.n	800121c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001178:	b29b      	uxth	r3, r3
 800117a:	2bff      	cmp	r3, #255	; 0xff
 800117c:	d911      	bls.n	80011a2 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	22ff      	movs	r2, #255	; 0xff
 8001182:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001188:	b2da      	uxtb	r2, r3
 800118a:	2380      	movs	r3, #128	; 0x80
 800118c:	045c      	lsls	r4, r3, #17
 800118e:	230a      	movs	r3, #10
 8001190:	18fb      	adds	r3, r7, r3
 8001192:	8819      	ldrh	r1, [r3, #0]
 8001194:	68f8      	ldr	r0, [r7, #12]
 8001196:	2300      	movs	r3, #0
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	0023      	movs	r3, r4
 800119c:	f000 fa08 	bl	80015b0 <I2C_TransferConfig>
 80011a0:	e012      	b.n	80011c8 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	2380      	movs	r3, #128	; 0x80
 80011b4:	049c      	lsls	r4, r3, #18
 80011b6:	230a      	movs	r3, #10
 80011b8:	18fb      	adds	r3, r7, r3
 80011ba:	8819      	ldrh	r1, [r3, #0]
 80011bc:	68f8      	ldr	r0, [r7, #12]
 80011be:	2300      	movs	r3, #0
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	0023      	movs	r3, r4
 80011c4:	f000 f9f4 	bl	80015b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d197      	bne.n	8001102 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011d2:	697a      	ldr	r2, [r7, #20]
 80011d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	0018      	movs	r0, r3
 80011da:	f000 f8c7 	bl	800136c <I2C_WaitOnSTOPFlagUntilTimeout>
 80011de:	1e03      	subs	r3, r0, #0
 80011e0:	d001      	beq.n	80011e6 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e01a      	b.n	800121c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2220      	movs	r2, #32
 80011ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	685a      	ldr	r2, [r3, #4]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	490b      	ldr	r1, [pc, #44]	; (8001228 <HAL_I2C_Master_Receive+0x20c>)
 80011fa:	400a      	ands	r2, r1
 80011fc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2241      	movs	r2, #65	; 0x41
 8001202:	2120      	movs	r1, #32
 8001204:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2242      	movs	r2, #66	; 0x42
 800120a:	2100      	movs	r1, #0
 800120c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2240      	movs	r2, #64	; 0x40
 8001212:	2100      	movs	r1, #0
 8001214:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001216:	2300      	movs	r3, #0
 8001218:	e000      	b.n	800121c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800121a:	2302      	movs	r3, #2
  }
}
 800121c:	0018      	movs	r0, r3
 800121e:	46bd      	mov	sp, r7
 8001220:	b007      	add	sp, #28
 8001222:	bd90      	pop	{r4, r7, pc}
 8001224:	80002400 	.word	0x80002400
 8001228:	fe00e800 	.word	0xfe00e800

0800122c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	2202      	movs	r2, #2
 800123c:	4013      	ands	r3, r2
 800123e:	2b02      	cmp	r3, #2
 8001240:	d103      	bne.n	800124a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2200      	movs	r2, #0
 8001248:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	2201      	movs	r2, #1
 8001252:	4013      	ands	r3, r2
 8001254:	2b01      	cmp	r3, #1
 8001256:	d007      	beq.n	8001268 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	699a      	ldr	r2, [r3, #24]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2101      	movs	r1, #1
 8001264:	430a      	orrs	r2, r1
 8001266:	619a      	str	r2, [r3, #24]
  }
}
 8001268:	46c0      	nop			; (mov r8, r8)
 800126a:	46bd      	mov	sp, r7
 800126c:	b002      	add	sp, #8
 800126e:	bd80      	pop	{r7, pc}

08001270 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	603b      	str	r3, [r7, #0]
 800127c:	1dfb      	adds	r3, r7, #7
 800127e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001280:	e021      	b.n	80012c6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	3301      	adds	r3, #1
 8001286:	d01e      	beq.n	80012c6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001288:	f7ff faa0 	bl	80007cc <HAL_GetTick>
 800128c:	0002      	movs	r2, r0
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	429a      	cmp	r2, r3
 8001296:	d302      	bcc.n	800129e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d113      	bne.n	80012c6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	2220      	movs	r2, #32
 80012a4:	431a      	orrs	r2, r3
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2241      	movs	r2, #65	; 0x41
 80012ae:	2120      	movs	r1, #32
 80012b0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	2242      	movs	r2, #66	; 0x42
 80012b6:	2100      	movs	r1, #0
 80012b8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	2240      	movs	r2, #64	; 0x40
 80012be:	2100      	movs	r1, #0
 80012c0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e00f      	b.n	80012e6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	68ba      	ldr	r2, [r7, #8]
 80012ce:	4013      	ands	r3, r2
 80012d0:	68ba      	ldr	r2, [r7, #8]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	425a      	negs	r2, r3
 80012d6:	4153      	adcs	r3, r2
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	001a      	movs	r2, r3
 80012dc:	1dfb      	adds	r3, r7, #7
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d0ce      	beq.n	8001282 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	0018      	movs	r0, r3
 80012e8:	46bd      	mov	sp, r7
 80012ea:	b004      	add	sp, #16
 80012ec:	bd80      	pop	{r7, pc}

080012ee <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b084      	sub	sp, #16
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	60f8      	str	r0, [r7, #12]
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80012fa:	e02b      	b.n	8001354 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	68b9      	ldr	r1, [r7, #8]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	0018      	movs	r0, r3
 8001304:	f000 f8da 	bl	80014bc <I2C_IsAcknowledgeFailed>
 8001308:	1e03      	subs	r3, r0, #0
 800130a:	d001      	beq.n	8001310 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e029      	b.n	8001364 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	3301      	adds	r3, #1
 8001314:	d01e      	beq.n	8001354 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001316:	f7ff fa59 	bl	80007cc <HAL_GetTick>
 800131a:	0002      	movs	r2, r0
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	68ba      	ldr	r2, [r7, #8]
 8001322:	429a      	cmp	r2, r3
 8001324:	d302      	bcc.n	800132c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d113      	bne.n	8001354 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001330:	2220      	movs	r2, #32
 8001332:	431a      	orrs	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2241      	movs	r2, #65	; 0x41
 800133c:	2120      	movs	r1, #32
 800133e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2242      	movs	r2, #66	; 0x42
 8001344:	2100      	movs	r1, #0
 8001346:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2240      	movs	r2, #64	; 0x40
 800134c:	2100      	movs	r1, #0
 800134e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e007      	b.n	8001364 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	2202      	movs	r2, #2
 800135c:	4013      	ands	r3, r2
 800135e:	2b02      	cmp	r3, #2
 8001360:	d1cc      	bne.n	80012fc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001362:	2300      	movs	r3, #0
}
 8001364:	0018      	movs	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	b004      	add	sp, #16
 800136a:	bd80      	pop	{r7, pc}

0800136c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001378:	e028      	b.n	80013cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	0018      	movs	r0, r3
 8001382:	f000 f89b 	bl	80014bc <I2C_IsAcknowledgeFailed>
 8001386:	1e03      	subs	r3, r0, #0
 8001388:	d001      	beq.n	800138e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e026      	b.n	80013dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800138e:	f7ff fa1d 	bl	80007cc <HAL_GetTick>
 8001392:	0002      	movs	r2, r0
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	68ba      	ldr	r2, [r7, #8]
 800139a:	429a      	cmp	r2, r3
 800139c:	d302      	bcc.n	80013a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d113      	bne.n	80013cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a8:	2220      	movs	r2, #32
 80013aa:	431a      	orrs	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2241      	movs	r2, #65	; 0x41
 80013b4:	2120      	movs	r1, #32
 80013b6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2242      	movs	r2, #66	; 0x42
 80013bc:	2100      	movs	r1, #0
 80013be:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2240      	movs	r2, #64	; 0x40
 80013c4:	2100      	movs	r1, #0
 80013c6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e007      	b.n	80013dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	2220      	movs	r2, #32
 80013d4:	4013      	ands	r3, r2
 80013d6:	2b20      	cmp	r3, #32
 80013d8:	d1cf      	bne.n	800137a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80013da:	2300      	movs	r3, #0
}
 80013dc:	0018      	movs	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	b004      	add	sp, #16
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80013f0:	e055      	b.n	800149e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	68b9      	ldr	r1, [r7, #8]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	0018      	movs	r0, r3
 80013fa:	f000 f85f 	bl	80014bc <I2C_IsAcknowledgeFailed>
 80013fe:	1e03      	subs	r3, r0, #0
 8001400:	d001      	beq.n	8001406 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e053      	b.n	80014ae <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	2220      	movs	r2, #32
 800140e:	4013      	ands	r3, r2
 8001410:	2b20      	cmp	r3, #32
 8001412:	d129      	bne.n	8001468 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	2204      	movs	r2, #4
 800141c:	4013      	ands	r3, r2
 800141e:	2b04      	cmp	r3, #4
 8001420:	d105      	bne.n	800142e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800142a:	2300      	movs	r3, #0
 800142c:	e03f      	b.n	80014ae <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2220      	movs	r2, #32
 8001434:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	491d      	ldr	r1, [pc, #116]	; (80014b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8001442:	400a      	ands	r2, r1
 8001444:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2200      	movs	r2, #0
 800144a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2241      	movs	r2, #65	; 0x41
 8001450:	2120      	movs	r1, #32
 8001452:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2242      	movs	r2, #66	; 0x42
 8001458:	2100      	movs	r1, #0
 800145a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2240      	movs	r2, #64	; 0x40
 8001460:	2100      	movs	r1, #0
 8001462:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e022      	b.n	80014ae <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001468:	f7ff f9b0 	bl	80007cc <HAL_GetTick>
 800146c:	0002      	movs	r2, r0
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	429a      	cmp	r2, r3
 8001476:	d302      	bcc.n	800147e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d10f      	bne.n	800149e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	2220      	movs	r2, #32
 8001484:	431a      	orrs	r2, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2241      	movs	r2, #65	; 0x41
 800148e:	2120      	movs	r1, #32
 8001490:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2240      	movs	r2, #64	; 0x40
 8001496:	2100      	movs	r1, #0
 8001498:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e007      	b.n	80014ae <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	2204      	movs	r2, #4
 80014a6:	4013      	ands	r3, r2
 80014a8:	2b04      	cmp	r3, #4
 80014aa:	d1a2      	bne.n	80013f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	0018      	movs	r0, r3
 80014b0:	46bd      	mov	sp, r7
 80014b2:	b004      	add	sp, #16
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	fe00e800 	.word	0xfe00e800

080014bc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	2210      	movs	r2, #16
 80014d0:	4013      	ands	r3, r2
 80014d2:	2b10      	cmp	r3, #16
 80014d4:	d164      	bne.n	80015a0 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	685a      	ldr	r2, [r3, #4]
 80014dc:	2380      	movs	r3, #128	; 0x80
 80014de:	049b      	lsls	r3, r3, #18
 80014e0:	401a      	ands	r2, r3
 80014e2:	2380      	movs	r3, #128	; 0x80
 80014e4:	049b      	lsls	r3, r3, #18
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d02b      	beq.n	8001542 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2180      	movs	r1, #128	; 0x80
 80014f6:	01c9      	lsls	r1, r1, #7
 80014f8:	430a      	orrs	r2, r1
 80014fa:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80014fc:	e021      	b.n	8001542 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	3301      	adds	r3, #1
 8001502:	d01e      	beq.n	8001542 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001504:	f7ff f962 	bl	80007cc <HAL_GetTick>
 8001508:	0002      	movs	r2, r0
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	429a      	cmp	r2, r3
 8001512:	d302      	bcc.n	800151a <I2C_IsAcknowledgeFailed+0x5e>
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d113      	bne.n	8001542 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151e:	2220      	movs	r2, #32
 8001520:	431a      	orrs	r2, r3
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2241      	movs	r2, #65	; 0x41
 800152a:	2120      	movs	r1, #32
 800152c:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2242      	movs	r2, #66	; 0x42
 8001532:	2100      	movs	r1, #0
 8001534:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2240      	movs	r2, #64	; 0x40
 800153a:	2100      	movs	r1, #0
 800153c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e02f      	b.n	80015a2 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	2220      	movs	r2, #32
 800154a:	4013      	ands	r3, r2
 800154c:	2b20      	cmp	r3, #32
 800154e:	d1d6      	bne.n	80014fe <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2210      	movs	r2, #16
 8001556:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2220      	movs	r2, #32
 800155e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	0018      	movs	r0, r3
 8001564:	f7ff fe62 	bl	800122c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	685a      	ldr	r2, [r3, #4]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	490e      	ldr	r1, [pc, #56]	; (80015ac <I2C_IsAcknowledgeFailed+0xf0>)
 8001574:	400a      	ands	r2, r1
 8001576:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157c:	2204      	movs	r2, #4
 800157e:	431a      	orrs	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2241      	movs	r2, #65	; 0x41
 8001588:	2120      	movs	r1, #32
 800158a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2242      	movs	r2, #66	; 0x42
 8001590:	2100      	movs	r1, #0
 8001592:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2240      	movs	r2, #64	; 0x40
 8001598:	2100      	movs	r1, #0
 800159a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e000      	b.n	80015a2 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	0018      	movs	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	b004      	add	sp, #16
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	46c0      	nop			; (mov r8, r8)
 80015ac:	fe00e800 	.word	0xfe00e800

080015b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80015b0:	b590      	push	{r4, r7, lr}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	0008      	movs	r0, r1
 80015ba:	0011      	movs	r1, r2
 80015bc:	607b      	str	r3, [r7, #4]
 80015be:	240a      	movs	r4, #10
 80015c0:	193b      	adds	r3, r7, r4
 80015c2:	1c02      	adds	r2, r0, #0
 80015c4:	801a      	strh	r2, [r3, #0]
 80015c6:	2009      	movs	r0, #9
 80015c8:	183b      	adds	r3, r7, r0
 80015ca:	1c0a      	adds	r2, r1, #0
 80015cc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	6a3a      	ldr	r2, [r7, #32]
 80015d6:	0d51      	lsrs	r1, r2, #21
 80015d8:	2280      	movs	r2, #128	; 0x80
 80015da:	00d2      	lsls	r2, r2, #3
 80015dc:	400a      	ands	r2, r1
 80015de:	490e      	ldr	r1, [pc, #56]	; (8001618 <I2C_TransferConfig+0x68>)
 80015e0:	430a      	orrs	r2, r1
 80015e2:	43d2      	mvns	r2, r2
 80015e4:	401a      	ands	r2, r3
 80015e6:	0011      	movs	r1, r2
 80015e8:	193b      	adds	r3, r7, r4
 80015ea:	881b      	ldrh	r3, [r3, #0]
 80015ec:	059b      	lsls	r3, r3, #22
 80015ee:	0d9a      	lsrs	r2, r3, #22
 80015f0:	183b      	adds	r3, r7, r0
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	0418      	lsls	r0, r3, #16
 80015f6:	23ff      	movs	r3, #255	; 0xff
 80015f8:	041b      	lsls	r3, r3, #16
 80015fa:	4003      	ands	r3, r0
 80015fc:	431a      	orrs	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	431a      	orrs	r2, r3
 8001602:	6a3b      	ldr	r3, [r7, #32]
 8001604:	431a      	orrs	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	430a      	orrs	r2, r1
 800160c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800160e:	46c0      	nop			; (mov r8, r8)
 8001610:	46bd      	mov	sp, r7
 8001612:	b005      	add	sp, #20
 8001614:	bd90      	pop	{r4, r7, pc}
 8001616:	46c0      	nop			; (mov r8, r8)
 8001618:	03ff63ff 	.word	0x03ff63ff

0800161c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2241      	movs	r2, #65	; 0x41
 800162a:	5c9b      	ldrb	r3, [r3, r2]
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b20      	cmp	r3, #32
 8001630:	d138      	bne.n	80016a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2240      	movs	r2, #64	; 0x40
 8001636:	5c9b      	ldrb	r3, [r3, r2]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d101      	bne.n	8001640 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800163c:	2302      	movs	r3, #2
 800163e:	e032      	b.n	80016a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2240      	movs	r2, #64	; 0x40
 8001644:	2101      	movs	r1, #1
 8001646:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2241      	movs	r2, #65	; 0x41
 800164c:	2124      	movs	r1, #36	; 0x24
 800164e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2101      	movs	r1, #1
 800165c:	438a      	bics	r2, r1
 800165e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4911      	ldr	r1, [pc, #68]	; (80016b0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800166c:	400a      	ands	r2, r1
 800166e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6819      	ldr	r1, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	430a      	orrs	r2, r1
 800167e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2101      	movs	r1, #1
 800168c:	430a      	orrs	r2, r1
 800168e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2241      	movs	r2, #65	; 0x41
 8001694:	2120      	movs	r1, #32
 8001696:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2240      	movs	r2, #64	; 0x40
 800169c:	2100      	movs	r1, #0
 800169e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80016a0:	2300      	movs	r3, #0
 80016a2:	e000      	b.n	80016a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80016a4:	2302      	movs	r3, #2
  }
}
 80016a6:	0018      	movs	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	b002      	add	sp, #8
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	ffffefff 	.word	0xffffefff

080016b4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2241      	movs	r2, #65	; 0x41
 80016c2:	5c9b      	ldrb	r3, [r3, r2]
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b20      	cmp	r3, #32
 80016c8:	d139      	bne.n	800173e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2240      	movs	r2, #64	; 0x40
 80016ce:	5c9b      	ldrb	r3, [r3, r2]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d101      	bne.n	80016d8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80016d4:	2302      	movs	r3, #2
 80016d6:	e033      	b.n	8001740 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2240      	movs	r2, #64	; 0x40
 80016dc:	2101      	movs	r1, #1
 80016de:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2241      	movs	r2, #65	; 0x41
 80016e4:	2124      	movs	r1, #36	; 0x24
 80016e6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2101      	movs	r1, #1
 80016f4:	438a      	bics	r2, r1
 80016f6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4a11      	ldr	r2, [pc, #68]	; (8001748 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001704:	4013      	ands	r3, r2
 8001706:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	021b      	lsls	r3, r3, #8
 800170c:	68fa      	ldr	r2, [r7, #12]
 800170e:	4313      	orrs	r3, r2
 8001710:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2101      	movs	r1, #1
 8001726:	430a      	orrs	r2, r1
 8001728:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2241      	movs	r2, #65	; 0x41
 800172e:	2120      	movs	r1, #32
 8001730:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2240      	movs	r2, #64	; 0x40
 8001736:	2100      	movs	r1, #0
 8001738:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	e000      	b.n	8001740 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800173e:	2302      	movs	r3, #2
  }
}
 8001740:	0018      	movs	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	b004      	add	sp, #16
 8001746:	bd80      	pop	{r7, pc}
 8001748:	fffff0ff 	.word	0xfffff0ff

0800174c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b088      	sub	sp, #32
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e301      	b.n	8001d62 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2201      	movs	r2, #1
 8001764:	4013      	ands	r3, r2
 8001766:	d100      	bne.n	800176a <HAL_RCC_OscConfig+0x1e>
 8001768:	e08d      	b.n	8001886 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800176a:	4bc3      	ldr	r3, [pc, #780]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	220c      	movs	r2, #12
 8001770:	4013      	ands	r3, r2
 8001772:	2b04      	cmp	r3, #4
 8001774:	d00e      	beq.n	8001794 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001776:	4bc0      	ldr	r3, [pc, #768]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	220c      	movs	r2, #12
 800177c:	4013      	ands	r3, r2
 800177e:	2b08      	cmp	r3, #8
 8001780:	d116      	bne.n	80017b0 <HAL_RCC_OscConfig+0x64>
 8001782:	4bbd      	ldr	r3, [pc, #756]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	2380      	movs	r3, #128	; 0x80
 8001788:	025b      	lsls	r3, r3, #9
 800178a:	401a      	ands	r2, r3
 800178c:	2380      	movs	r3, #128	; 0x80
 800178e:	025b      	lsls	r3, r3, #9
 8001790:	429a      	cmp	r2, r3
 8001792:	d10d      	bne.n	80017b0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001794:	4bb8      	ldr	r3, [pc, #736]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	2380      	movs	r3, #128	; 0x80
 800179a:	029b      	lsls	r3, r3, #10
 800179c:	4013      	ands	r3, r2
 800179e:	d100      	bne.n	80017a2 <HAL_RCC_OscConfig+0x56>
 80017a0:	e070      	b.n	8001884 <HAL_RCC_OscConfig+0x138>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d000      	beq.n	80017ac <HAL_RCC_OscConfig+0x60>
 80017aa:	e06b      	b.n	8001884 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e2d8      	b.n	8001d62 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d107      	bne.n	80017c8 <HAL_RCC_OscConfig+0x7c>
 80017b8:	4baf      	ldr	r3, [pc, #700]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4bae      	ldr	r3, [pc, #696]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 80017be:	2180      	movs	r1, #128	; 0x80
 80017c0:	0249      	lsls	r1, r1, #9
 80017c2:	430a      	orrs	r2, r1
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	e02f      	b.n	8001828 <HAL_RCC_OscConfig+0xdc>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d10c      	bne.n	80017ea <HAL_RCC_OscConfig+0x9e>
 80017d0:	4ba9      	ldr	r3, [pc, #676]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4ba8      	ldr	r3, [pc, #672]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 80017d6:	49a9      	ldr	r1, [pc, #676]	; (8001a7c <HAL_RCC_OscConfig+0x330>)
 80017d8:	400a      	ands	r2, r1
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	4ba6      	ldr	r3, [pc, #664]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4ba5      	ldr	r3, [pc, #660]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 80017e2:	49a7      	ldr	r1, [pc, #668]	; (8001a80 <HAL_RCC_OscConfig+0x334>)
 80017e4:	400a      	ands	r2, r1
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	e01e      	b.n	8001828 <HAL_RCC_OscConfig+0xdc>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b05      	cmp	r3, #5
 80017f0:	d10e      	bne.n	8001810 <HAL_RCC_OscConfig+0xc4>
 80017f2:	4ba1      	ldr	r3, [pc, #644]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	4ba0      	ldr	r3, [pc, #640]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 80017f8:	2180      	movs	r1, #128	; 0x80
 80017fa:	02c9      	lsls	r1, r1, #11
 80017fc:	430a      	orrs	r2, r1
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	4b9d      	ldr	r3, [pc, #628]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4b9c      	ldr	r3, [pc, #624]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 8001806:	2180      	movs	r1, #128	; 0x80
 8001808:	0249      	lsls	r1, r1, #9
 800180a:	430a      	orrs	r2, r1
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	e00b      	b.n	8001828 <HAL_RCC_OscConfig+0xdc>
 8001810:	4b99      	ldr	r3, [pc, #612]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	4b98      	ldr	r3, [pc, #608]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 8001816:	4999      	ldr	r1, [pc, #612]	; (8001a7c <HAL_RCC_OscConfig+0x330>)
 8001818:	400a      	ands	r2, r1
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	4b96      	ldr	r3, [pc, #600]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b95      	ldr	r3, [pc, #596]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 8001822:	4997      	ldr	r1, [pc, #604]	; (8001a80 <HAL_RCC_OscConfig+0x334>)
 8001824:	400a      	ands	r2, r1
 8001826:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d014      	beq.n	800185a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001830:	f7fe ffcc 	bl	80007cc <HAL_GetTick>
 8001834:	0003      	movs	r3, r0
 8001836:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800183a:	f7fe ffc7 	bl	80007cc <HAL_GetTick>
 800183e:	0002      	movs	r2, r0
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b64      	cmp	r3, #100	; 0x64
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e28a      	b.n	8001d62 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184c:	4b8a      	ldr	r3, [pc, #552]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	2380      	movs	r3, #128	; 0x80
 8001852:	029b      	lsls	r3, r3, #10
 8001854:	4013      	ands	r3, r2
 8001856:	d0f0      	beq.n	800183a <HAL_RCC_OscConfig+0xee>
 8001858:	e015      	b.n	8001886 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185a:	f7fe ffb7 	bl	80007cc <HAL_GetTick>
 800185e:	0003      	movs	r3, r0
 8001860:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001864:	f7fe ffb2 	bl	80007cc <HAL_GetTick>
 8001868:	0002      	movs	r2, r0
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b64      	cmp	r3, #100	; 0x64
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e275      	b.n	8001d62 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001876:	4b80      	ldr	r3, [pc, #512]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	2380      	movs	r3, #128	; 0x80
 800187c:	029b      	lsls	r3, r3, #10
 800187e:	4013      	ands	r3, r2
 8001880:	d1f0      	bne.n	8001864 <HAL_RCC_OscConfig+0x118>
 8001882:	e000      	b.n	8001886 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001884:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2202      	movs	r2, #2
 800188c:	4013      	ands	r3, r2
 800188e:	d100      	bne.n	8001892 <HAL_RCC_OscConfig+0x146>
 8001890:	e069      	b.n	8001966 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001892:	4b79      	ldr	r3, [pc, #484]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	220c      	movs	r2, #12
 8001898:	4013      	ands	r3, r2
 800189a:	d00b      	beq.n	80018b4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800189c:	4b76      	ldr	r3, [pc, #472]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	220c      	movs	r2, #12
 80018a2:	4013      	ands	r3, r2
 80018a4:	2b08      	cmp	r3, #8
 80018a6:	d11c      	bne.n	80018e2 <HAL_RCC_OscConfig+0x196>
 80018a8:	4b73      	ldr	r3, [pc, #460]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	2380      	movs	r3, #128	; 0x80
 80018ae:	025b      	lsls	r3, r3, #9
 80018b0:	4013      	ands	r3, r2
 80018b2:	d116      	bne.n	80018e2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018b4:	4b70      	ldr	r3, [pc, #448]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2202      	movs	r2, #2
 80018ba:	4013      	ands	r3, r2
 80018bc:	d005      	beq.n	80018ca <HAL_RCC_OscConfig+0x17e>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d001      	beq.n	80018ca <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e24b      	b.n	8001d62 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ca:	4b6b      	ldr	r3, [pc, #428]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	22f8      	movs	r2, #248	; 0xf8
 80018d0:	4393      	bics	r3, r2
 80018d2:	0019      	movs	r1, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	691b      	ldr	r3, [r3, #16]
 80018d8:	00da      	lsls	r2, r3, #3
 80018da:	4b67      	ldr	r3, [pc, #412]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 80018dc:	430a      	orrs	r2, r1
 80018de:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018e0:	e041      	b.n	8001966 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d024      	beq.n	8001934 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018ea:	4b63      	ldr	r3, [pc, #396]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	4b62      	ldr	r3, [pc, #392]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 80018f0:	2101      	movs	r1, #1
 80018f2:	430a      	orrs	r2, r1
 80018f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f6:	f7fe ff69 	bl	80007cc <HAL_GetTick>
 80018fa:	0003      	movs	r3, r0
 80018fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001900:	f7fe ff64 	bl	80007cc <HAL_GetTick>
 8001904:	0002      	movs	r2, r0
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e227      	b.n	8001d62 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001912:	4b59      	ldr	r3, [pc, #356]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2202      	movs	r2, #2
 8001918:	4013      	ands	r3, r2
 800191a:	d0f1      	beq.n	8001900 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800191c:	4b56      	ldr	r3, [pc, #344]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	22f8      	movs	r2, #248	; 0xf8
 8001922:	4393      	bics	r3, r2
 8001924:	0019      	movs	r1, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	00da      	lsls	r2, r3, #3
 800192c:	4b52      	ldr	r3, [pc, #328]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 800192e:	430a      	orrs	r2, r1
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	e018      	b.n	8001966 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001934:	4b50      	ldr	r3, [pc, #320]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4b4f      	ldr	r3, [pc, #316]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 800193a:	2101      	movs	r1, #1
 800193c:	438a      	bics	r2, r1
 800193e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001940:	f7fe ff44 	bl	80007cc <HAL_GetTick>
 8001944:	0003      	movs	r3, r0
 8001946:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800194a:	f7fe ff3f 	bl	80007cc <HAL_GetTick>
 800194e:	0002      	movs	r2, r0
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e202      	b.n	8001d62 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800195c:	4b46      	ldr	r3, [pc, #280]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2202      	movs	r2, #2
 8001962:	4013      	ands	r3, r2
 8001964:	d1f1      	bne.n	800194a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2208      	movs	r2, #8
 800196c:	4013      	ands	r3, r2
 800196e:	d036      	beq.n	80019de <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	69db      	ldr	r3, [r3, #28]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d019      	beq.n	80019ac <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001978:	4b3f      	ldr	r3, [pc, #252]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 800197a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800197c:	4b3e      	ldr	r3, [pc, #248]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 800197e:	2101      	movs	r1, #1
 8001980:	430a      	orrs	r2, r1
 8001982:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001984:	f7fe ff22 	bl	80007cc <HAL_GetTick>
 8001988:	0003      	movs	r3, r0
 800198a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800198e:	f7fe ff1d 	bl	80007cc <HAL_GetTick>
 8001992:	0002      	movs	r2, r0
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e1e0      	b.n	8001d62 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019a0:	4b35      	ldr	r3, [pc, #212]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 80019a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a4:	2202      	movs	r2, #2
 80019a6:	4013      	ands	r3, r2
 80019a8:	d0f1      	beq.n	800198e <HAL_RCC_OscConfig+0x242>
 80019aa:	e018      	b.n	80019de <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ac:	4b32      	ldr	r3, [pc, #200]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 80019ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019b0:	4b31      	ldr	r3, [pc, #196]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 80019b2:	2101      	movs	r1, #1
 80019b4:	438a      	bics	r2, r1
 80019b6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b8:	f7fe ff08 	bl	80007cc <HAL_GetTick>
 80019bc:	0003      	movs	r3, r0
 80019be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019c2:	f7fe ff03 	bl	80007cc <HAL_GetTick>
 80019c6:	0002      	movs	r2, r0
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e1c6      	b.n	8001d62 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d4:	4b28      	ldr	r3, [pc, #160]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 80019d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d8:	2202      	movs	r2, #2
 80019da:	4013      	ands	r3, r2
 80019dc:	d1f1      	bne.n	80019c2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2204      	movs	r2, #4
 80019e4:	4013      	ands	r3, r2
 80019e6:	d100      	bne.n	80019ea <HAL_RCC_OscConfig+0x29e>
 80019e8:	e0b4      	b.n	8001b54 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ea:	201f      	movs	r0, #31
 80019ec:	183b      	adds	r3, r7, r0
 80019ee:	2200      	movs	r2, #0
 80019f0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019f2:	4b21      	ldr	r3, [pc, #132]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 80019f4:	69da      	ldr	r2, [r3, #28]
 80019f6:	2380      	movs	r3, #128	; 0x80
 80019f8:	055b      	lsls	r3, r3, #21
 80019fa:	4013      	ands	r3, r2
 80019fc:	d110      	bne.n	8001a20 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019fe:	4b1e      	ldr	r3, [pc, #120]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 8001a00:	69da      	ldr	r2, [r3, #28]
 8001a02:	4b1d      	ldr	r3, [pc, #116]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 8001a04:	2180      	movs	r1, #128	; 0x80
 8001a06:	0549      	lsls	r1, r1, #21
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	61da      	str	r2, [r3, #28]
 8001a0c:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 8001a0e:	69da      	ldr	r2, [r3, #28]
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	055b      	lsls	r3, r3, #21
 8001a14:	4013      	ands	r3, r2
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a1a:	183b      	adds	r3, r7, r0
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a20:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <HAL_RCC_OscConfig+0x338>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	2380      	movs	r3, #128	; 0x80
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d11a      	bne.n	8001a62 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a2c:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <HAL_RCC_OscConfig+0x338>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <HAL_RCC_OscConfig+0x338>)
 8001a32:	2180      	movs	r1, #128	; 0x80
 8001a34:	0049      	lsls	r1, r1, #1
 8001a36:	430a      	orrs	r2, r1
 8001a38:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a3a:	f7fe fec7 	bl	80007cc <HAL_GetTick>
 8001a3e:	0003      	movs	r3, r0
 8001a40:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a44:	f7fe fec2 	bl	80007cc <HAL_GetTick>
 8001a48:	0002      	movs	r2, r0
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b64      	cmp	r3, #100	; 0x64
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e185      	b.n	8001d62 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a56:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <HAL_RCC_OscConfig+0x338>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	2380      	movs	r3, #128	; 0x80
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d0f0      	beq.n	8001a44 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d10e      	bne.n	8001a88 <HAL_RCC_OscConfig+0x33c>
 8001a6a:	4b03      	ldr	r3, [pc, #12]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 8001a6c:	6a1a      	ldr	r2, [r3, #32]
 8001a6e:	4b02      	ldr	r3, [pc, #8]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 8001a70:	2101      	movs	r1, #1
 8001a72:	430a      	orrs	r2, r1
 8001a74:	621a      	str	r2, [r3, #32]
 8001a76:	e035      	b.n	8001ae4 <HAL_RCC_OscConfig+0x398>
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	fffeffff 	.word	0xfffeffff
 8001a80:	fffbffff 	.word	0xfffbffff
 8001a84:	40007000 	.word	0x40007000
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d10c      	bne.n	8001aaa <HAL_RCC_OscConfig+0x35e>
 8001a90:	4bb6      	ldr	r3, [pc, #728]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001a92:	6a1a      	ldr	r2, [r3, #32]
 8001a94:	4bb5      	ldr	r3, [pc, #724]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001a96:	2101      	movs	r1, #1
 8001a98:	438a      	bics	r2, r1
 8001a9a:	621a      	str	r2, [r3, #32]
 8001a9c:	4bb3      	ldr	r3, [pc, #716]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001a9e:	6a1a      	ldr	r2, [r3, #32]
 8001aa0:	4bb2      	ldr	r3, [pc, #712]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001aa2:	2104      	movs	r1, #4
 8001aa4:	438a      	bics	r2, r1
 8001aa6:	621a      	str	r2, [r3, #32]
 8001aa8:	e01c      	b.n	8001ae4 <HAL_RCC_OscConfig+0x398>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	2b05      	cmp	r3, #5
 8001ab0:	d10c      	bne.n	8001acc <HAL_RCC_OscConfig+0x380>
 8001ab2:	4bae      	ldr	r3, [pc, #696]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001ab4:	6a1a      	ldr	r2, [r3, #32]
 8001ab6:	4bad      	ldr	r3, [pc, #692]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001ab8:	2104      	movs	r1, #4
 8001aba:	430a      	orrs	r2, r1
 8001abc:	621a      	str	r2, [r3, #32]
 8001abe:	4bab      	ldr	r3, [pc, #684]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001ac0:	6a1a      	ldr	r2, [r3, #32]
 8001ac2:	4baa      	ldr	r3, [pc, #680]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	621a      	str	r2, [r3, #32]
 8001aca:	e00b      	b.n	8001ae4 <HAL_RCC_OscConfig+0x398>
 8001acc:	4ba7      	ldr	r3, [pc, #668]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001ace:	6a1a      	ldr	r2, [r3, #32]
 8001ad0:	4ba6      	ldr	r3, [pc, #664]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	438a      	bics	r2, r1
 8001ad6:	621a      	str	r2, [r3, #32]
 8001ad8:	4ba4      	ldr	r3, [pc, #656]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001ada:	6a1a      	ldr	r2, [r3, #32]
 8001adc:	4ba3      	ldr	r3, [pc, #652]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001ade:	2104      	movs	r1, #4
 8001ae0:	438a      	bics	r2, r1
 8001ae2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d014      	beq.n	8001b16 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aec:	f7fe fe6e 	bl	80007cc <HAL_GetTick>
 8001af0:	0003      	movs	r3, r0
 8001af2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af4:	e009      	b.n	8001b0a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001af6:	f7fe fe69 	bl	80007cc <HAL_GetTick>
 8001afa:	0002      	movs	r2, r0
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	4a9b      	ldr	r2, [pc, #620]	; (8001d70 <HAL_RCC_OscConfig+0x624>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e12b      	b.n	8001d62 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b0a:	4b98      	ldr	r3, [pc, #608]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001b0c:	6a1b      	ldr	r3, [r3, #32]
 8001b0e:	2202      	movs	r2, #2
 8001b10:	4013      	ands	r3, r2
 8001b12:	d0f0      	beq.n	8001af6 <HAL_RCC_OscConfig+0x3aa>
 8001b14:	e013      	b.n	8001b3e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b16:	f7fe fe59 	bl	80007cc <HAL_GetTick>
 8001b1a:	0003      	movs	r3, r0
 8001b1c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b1e:	e009      	b.n	8001b34 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b20:	f7fe fe54 	bl	80007cc <HAL_GetTick>
 8001b24:	0002      	movs	r2, r0
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	4a91      	ldr	r2, [pc, #580]	; (8001d70 <HAL_RCC_OscConfig+0x624>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e116      	b.n	8001d62 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b34:	4b8d      	ldr	r3, [pc, #564]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	2202      	movs	r2, #2
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	d1f0      	bne.n	8001b20 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b3e:	231f      	movs	r3, #31
 8001b40:	18fb      	adds	r3, r7, r3
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d105      	bne.n	8001b54 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b48:	4b88      	ldr	r3, [pc, #544]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001b4a:	69da      	ldr	r2, [r3, #28]
 8001b4c:	4b87      	ldr	r3, [pc, #540]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001b4e:	4989      	ldr	r1, [pc, #548]	; (8001d74 <HAL_RCC_OscConfig+0x628>)
 8001b50:	400a      	ands	r2, r1
 8001b52:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2210      	movs	r2, #16
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	d063      	beq.n	8001c26 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d12a      	bne.n	8001bbc <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b66:	4b81      	ldr	r3, [pc, #516]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001b68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b6a:	4b80      	ldr	r3, [pc, #512]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001b6c:	2104      	movs	r1, #4
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001b72:	4b7e      	ldr	r3, [pc, #504]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001b74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b76:	4b7d      	ldr	r3, [pc, #500]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001b78:	2101      	movs	r1, #1
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b7e:	f7fe fe25 	bl	80007cc <HAL_GetTick>
 8001b82:	0003      	movs	r3, r0
 8001b84:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b88:	f7fe fe20 	bl	80007cc <HAL_GetTick>
 8001b8c:	0002      	movs	r2, r0
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e0e3      	b.n	8001d62 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b9a:	4b74      	ldr	r3, [pc, #464]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d0f1      	beq.n	8001b88 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ba4:	4b71      	ldr	r3, [pc, #452]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba8:	22f8      	movs	r2, #248	; 0xf8
 8001baa:	4393      	bics	r3, r2
 8001bac:	0019      	movs	r1, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	00da      	lsls	r2, r3, #3
 8001bb4:	4b6d      	ldr	r3, [pc, #436]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	635a      	str	r2, [r3, #52]	; 0x34
 8001bba:	e034      	b.n	8001c26 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	3305      	adds	r3, #5
 8001bc2:	d111      	bne.n	8001be8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001bc4:	4b69      	ldr	r3, [pc, #420]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001bc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bc8:	4b68      	ldr	r3, [pc, #416]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001bca:	2104      	movs	r1, #4
 8001bcc:	438a      	bics	r2, r1
 8001bce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001bd0:	4b66      	ldr	r3, [pc, #408]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bd4:	22f8      	movs	r2, #248	; 0xf8
 8001bd6:	4393      	bics	r3, r2
 8001bd8:	0019      	movs	r1, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	00da      	lsls	r2, r3, #3
 8001be0:	4b62      	ldr	r3, [pc, #392]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001be2:	430a      	orrs	r2, r1
 8001be4:	635a      	str	r2, [r3, #52]	; 0x34
 8001be6:	e01e      	b.n	8001c26 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001be8:	4b60      	ldr	r3, [pc, #384]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001bea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bec:	4b5f      	ldr	r3, [pc, #380]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001bee:	2104      	movs	r1, #4
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001bf4:	4b5d      	ldr	r3, [pc, #372]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001bf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bf8:	4b5c      	ldr	r3, [pc, #368]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	438a      	bics	r2, r1
 8001bfe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c00:	f7fe fde4 	bl	80007cc <HAL_GetTick>
 8001c04:	0003      	movs	r3, r0
 8001c06:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001c0a:	f7fe fddf 	bl	80007cc <HAL_GetTick>
 8001c0e:	0002      	movs	r2, r0
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e0a2      	b.n	8001d62 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001c1c:	4b53      	ldr	r3, [pc, #332]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c20:	2202      	movs	r2, #2
 8001c22:	4013      	ands	r3, r2
 8001c24:	d1f1      	bne.n	8001c0a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d100      	bne.n	8001c30 <HAL_RCC_OscConfig+0x4e4>
 8001c2e:	e097      	b.n	8001d60 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c30:	4b4e      	ldr	r3, [pc, #312]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	220c      	movs	r2, #12
 8001c36:	4013      	ands	r3, r2
 8001c38:	2b08      	cmp	r3, #8
 8001c3a:	d100      	bne.n	8001c3e <HAL_RCC_OscConfig+0x4f2>
 8001c3c:	e06b      	b.n	8001d16 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a1b      	ldr	r3, [r3, #32]
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d14c      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c46:	4b49      	ldr	r3, [pc, #292]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	4b48      	ldr	r3, [pc, #288]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001c4c:	494a      	ldr	r1, [pc, #296]	; (8001d78 <HAL_RCC_OscConfig+0x62c>)
 8001c4e:	400a      	ands	r2, r1
 8001c50:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c52:	f7fe fdbb 	bl	80007cc <HAL_GetTick>
 8001c56:	0003      	movs	r3, r0
 8001c58:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c5c:	f7fe fdb6 	bl	80007cc <HAL_GetTick>
 8001c60:	0002      	movs	r2, r0
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e079      	b.n	8001d62 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c6e:	4b3f      	ldr	r3, [pc, #252]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	2380      	movs	r3, #128	; 0x80
 8001c74:	049b      	lsls	r3, r3, #18
 8001c76:	4013      	ands	r3, r2
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c7a:	4b3c      	ldr	r3, [pc, #240]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7e:	220f      	movs	r2, #15
 8001c80:	4393      	bics	r3, r2
 8001c82:	0019      	movs	r1, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c88:	4b38      	ldr	r3, [pc, #224]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c8e:	4b37      	ldr	r3, [pc, #220]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	4a3a      	ldr	r2, [pc, #232]	; (8001d7c <HAL_RCC_OscConfig+0x630>)
 8001c94:	4013      	ands	r3, r2
 8001c96:	0019      	movs	r1, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	4b32      	ldr	r3, [pc, #200]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ca8:	4b30      	ldr	r3, [pc, #192]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	4b2f      	ldr	r3, [pc, #188]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001cae:	2180      	movs	r1, #128	; 0x80
 8001cb0:	0449      	lsls	r1, r1, #17
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb6:	f7fe fd89 	bl	80007cc <HAL_GetTick>
 8001cba:	0003      	movs	r3, r0
 8001cbc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc0:	f7fe fd84 	bl	80007cc <HAL_GetTick>
 8001cc4:	0002      	movs	r2, r0
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e047      	b.n	8001d62 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cd2:	4b26      	ldr	r3, [pc, #152]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	2380      	movs	r3, #128	; 0x80
 8001cd8:	049b      	lsls	r3, r3, #18
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d0f0      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x574>
 8001cde:	e03f      	b.n	8001d60 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ce0:	4b22      	ldr	r3, [pc, #136]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	4b21      	ldr	r3, [pc, #132]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001ce6:	4924      	ldr	r1, [pc, #144]	; (8001d78 <HAL_RCC_OscConfig+0x62c>)
 8001ce8:	400a      	ands	r2, r1
 8001cea:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cec:	f7fe fd6e 	bl	80007cc <HAL_GetTick>
 8001cf0:	0003      	movs	r3, r0
 8001cf2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cf6:	f7fe fd69 	bl	80007cc <HAL_GetTick>
 8001cfa:	0002      	movs	r2, r0
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e02c      	b.n	8001d62 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d08:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	2380      	movs	r3, #128	; 0x80
 8001d0e:	049b      	lsls	r3, r3, #18
 8001d10:	4013      	ands	r3, r2
 8001d12:	d1f0      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x5aa>
 8001d14:	e024      	b.n	8001d60 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d101      	bne.n	8001d22 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e01f      	b.n	8001d62 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001d22:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001d28:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	2380      	movs	r3, #128	; 0x80
 8001d32:	025b      	lsls	r3, r3, #9
 8001d34:	401a      	ands	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d10e      	bne.n	8001d5c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	220f      	movs	r2, #15
 8001d42:	401a      	ands	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d107      	bne.n	8001d5c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	23f0      	movs	r3, #240	; 0xf0
 8001d50:	039b      	lsls	r3, r3, #14
 8001d52:	401a      	ands	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d001      	beq.n	8001d60 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e000      	b.n	8001d62 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	0018      	movs	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	b008      	add	sp, #32
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	00001388 	.word	0x00001388
 8001d74:	efffffff 	.word	0xefffffff
 8001d78:	feffffff 	.word	0xfeffffff
 8001d7c:	ffc2ffff 	.word	0xffc2ffff

08001d80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e0b3      	b.n	8001efc <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d94:	4b5b      	ldr	r3, [pc, #364]	; (8001f04 <HAL_RCC_ClockConfig+0x184>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d911      	bls.n	8001dc6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da2:	4b58      	ldr	r3, [pc, #352]	; (8001f04 <HAL_RCC_ClockConfig+0x184>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2201      	movs	r2, #1
 8001da8:	4393      	bics	r3, r2
 8001daa:	0019      	movs	r1, r3
 8001dac:	4b55      	ldr	r3, [pc, #340]	; (8001f04 <HAL_RCC_ClockConfig+0x184>)
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	430a      	orrs	r2, r1
 8001db2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db4:	4b53      	ldr	r3, [pc, #332]	; (8001f04 <HAL_RCC_ClockConfig+0x184>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2201      	movs	r2, #1
 8001dba:	4013      	ands	r3, r2
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d001      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e09a      	b.n	8001efc <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2202      	movs	r2, #2
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d015      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2204      	movs	r2, #4
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	d006      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001dda:	4b4b      	ldr	r3, [pc, #300]	; (8001f08 <HAL_RCC_ClockConfig+0x188>)
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	4b4a      	ldr	r3, [pc, #296]	; (8001f08 <HAL_RCC_ClockConfig+0x188>)
 8001de0:	21e0      	movs	r1, #224	; 0xe0
 8001de2:	00c9      	lsls	r1, r1, #3
 8001de4:	430a      	orrs	r2, r1
 8001de6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001de8:	4b47      	ldr	r3, [pc, #284]	; (8001f08 <HAL_RCC_ClockConfig+0x188>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	22f0      	movs	r2, #240	; 0xf0
 8001dee:	4393      	bics	r3, r2
 8001df0:	0019      	movs	r1, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689a      	ldr	r2, [r3, #8]
 8001df6:	4b44      	ldr	r3, [pc, #272]	; (8001f08 <HAL_RCC_ClockConfig+0x188>)
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2201      	movs	r2, #1
 8001e02:	4013      	ands	r3, r2
 8001e04:	d040      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d107      	bne.n	8001e1e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0e:	4b3e      	ldr	r3, [pc, #248]	; (8001f08 <HAL_RCC_ClockConfig+0x188>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	2380      	movs	r3, #128	; 0x80
 8001e14:	029b      	lsls	r3, r3, #10
 8001e16:	4013      	ands	r3, r2
 8001e18:	d114      	bne.n	8001e44 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e06e      	b.n	8001efc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d107      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e26:	4b38      	ldr	r3, [pc, #224]	; (8001f08 <HAL_RCC_ClockConfig+0x188>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	2380      	movs	r3, #128	; 0x80
 8001e2c:	049b      	lsls	r3, r3, #18
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d108      	bne.n	8001e44 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e062      	b.n	8001efc <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e36:	4b34      	ldr	r3, [pc, #208]	; (8001f08 <HAL_RCC_ClockConfig+0x188>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d101      	bne.n	8001e44 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e05b      	b.n	8001efc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e44:	4b30      	ldr	r3, [pc, #192]	; (8001f08 <HAL_RCC_ClockConfig+0x188>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2203      	movs	r2, #3
 8001e4a:	4393      	bics	r3, r2
 8001e4c:	0019      	movs	r1, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	4b2d      	ldr	r3, [pc, #180]	; (8001f08 <HAL_RCC_ClockConfig+0x188>)
 8001e54:	430a      	orrs	r2, r1
 8001e56:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e58:	f7fe fcb8 	bl	80007cc <HAL_GetTick>
 8001e5c:	0003      	movs	r3, r0
 8001e5e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e60:	e009      	b.n	8001e76 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e62:	f7fe fcb3 	bl	80007cc <HAL_GetTick>
 8001e66:	0002      	movs	r2, r0
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	4a27      	ldr	r2, [pc, #156]	; (8001f0c <HAL_RCC_ClockConfig+0x18c>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e042      	b.n	8001efc <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e76:	4b24      	ldr	r3, [pc, #144]	; (8001f08 <HAL_RCC_ClockConfig+0x188>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	220c      	movs	r2, #12
 8001e7c:	401a      	ands	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d1ec      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e88:	4b1e      	ldr	r3, [pc, #120]	; (8001f04 <HAL_RCC_ClockConfig+0x184>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	4013      	ands	r3, r2
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d211      	bcs.n	8001eba <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e96:	4b1b      	ldr	r3, [pc, #108]	; (8001f04 <HAL_RCC_ClockConfig+0x184>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	4393      	bics	r3, r2
 8001e9e:	0019      	movs	r1, r3
 8001ea0:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <HAL_RCC_ClockConfig+0x184>)
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea8:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <HAL_RCC_ClockConfig+0x184>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2201      	movs	r2, #1
 8001eae:	4013      	ands	r3, r2
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d001      	beq.n	8001eba <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e020      	b.n	8001efc <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2204      	movs	r2, #4
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d009      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ec4:	4b10      	ldr	r3, [pc, #64]	; (8001f08 <HAL_RCC_ClockConfig+0x188>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	4a11      	ldr	r2, [pc, #68]	; (8001f10 <HAL_RCC_ClockConfig+0x190>)
 8001eca:	4013      	ands	r3, r2
 8001ecc:	0019      	movs	r1, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68da      	ldr	r2, [r3, #12]
 8001ed2:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <HAL_RCC_ClockConfig+0x188>)
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ed8:	f000 f820 	bl	8001f1c <HAL_RCC_GetSysClockFreq>
 8001edc:	0001      	movs	r1, r0
 8001ede:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <HAL_RCC_ClockConfig+0x188>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	091b      	lsrs	r3, r3, #4
 8001ee4:	220f      	movs	r2, #15
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	4a0a      	ldr	r2, [pc, #40]	; (8001f14 <HAL_RCC_ClockConfig+0x194>)
 8001eea:	5cd3      	ldrb	r3, [r2, r3]
 8001eec:	000a      	movs	r2, r1
 8001eee:	40da      	lsrs	r2, r3
 8001ef0:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <HAL_RCC_ClockConfig+0x198>)
 8001ef2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	f7fe fc23 	bl	8000740 <HAL_InitTick>
  
  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	0018      	movs	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	b004      	add	sp, #16
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40022000 	.word	0x40022000
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	00001388 	.word	0x00001388
 8001f10:	fffff8ff 	.word	0xfffff8ff
 8001f14:	08002234 	.word	0x08002234
 8001f18:	20000000 	.word	0x20000000

08001f1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f1c:	b590      	push	{r4, r7, lr}
 8001f1e:	b08f      	sub	sp, #60	; 0x3c
 8001f20:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001f22:	2314      	movs	r3, #20
 8001f24:	18fb      	adds	r3, r7, r3
 8001f26:	4a2b      	ldr	r2, [pc, #172]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f28:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001f2a:	c313      	stmia	r3!, {r0, r1, r4}
 8001f2c:	6812      	ldr	r2, [r2, #0]
 8001f2e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001f30:	1d3b      	adds	r3, r7, #4
 8001f32:	4a29      	ldr	r2, [pc, #164]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f34:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001f36:	c313      	stmia	r3!, {r0, r1, r4}
 8001f38:	6812      	ldr	r2, [r2, #0]
 8001f3a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f40:	2300      	movs	r3, #0
 8001f42:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f44:	2300      	movs	r3, #0
 8001f46:	637b      	str	r3, [r7, #52]	; 0x34
 8001f48:	2300      	movs	r3, #0
 8001f4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001f50:	4b22      	ldr	r3, [pc, #136]	; (8001fdc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f58:	220c      	movs	r2, #12
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	2b04      	cmp	r3, #4
 8001f5e:	d002      	beq.n	8001f66 <HAL_RCC_GetSysClockFreq+0x4a>
 8001f60:	2b08      	cmp	r3, #8
 8001f62:	d003      	beq.n	8001f6c <HAL_RCC_GetSysClockFreq+0x50>
 8001f64:	e02d      	b.n	8001fc2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f66:	4b1e      	ldr	r3, [pc, #120]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f68:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f6a:	e02d      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f6e:	0c9b      	lsrs	r3, r3, #18
 8001f70:	220f      	movs	r2, #15
 8001f72:	4013      	ands	r3, r2
 8001f74:	2214      	movs	r2, #20
 8001f76:	18ba      	adds	r2, r7, r2
 8001f78:	5cd3      	ldrb	r3, [r2, r3]
 8001f7a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001f7c:	4b17      	ldr	r3, [pc, #92]	; (8001fdc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f80:	220f      	movs	r2, #15
 8001f82:	4013      	ands	r3, r2
 8001f84:	1d3a      	adds	r2, r7, #4
 8001f86:	5cd3      	ldrb	r3, [r2, r3]
 8001f88:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001f8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f8c:	2380      	movs	r3, #128	; 0x80
 8001f8e:	025b      	lsls	r3, r3, #9
 8001f90:	4013      	ands	r3, r2
 8001f92:	d009      	beq.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f96:	4812      	ldr	r0, [pc, #72]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f98:	f7fe f8b6 	bl	8000108 <__udivsi3>
 8001f9c:	0003      	movs	r3, r0
 8001f9e:	001a      	movs	r2, r3
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	4353      	muls	r3, r2
 8001fa4:	637b      	str	r3, [r7, #52]	; 0x34
 8001fa6:	e009      	b.n	8001fbc <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001fa8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001faa:	000a      	movs	r2, r1
 8001fac:	0152      	lsls	r2, r2, #5
 8001fae:	1a52      	subs	r2, r2, r1
 8001fb0:	0193      	lsls	r3, r2, #6
 8001fb2:	1a9b      	subs	r3, r3, r2
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	185b      	adds	r3, r3, r1
 8001fb8:	021b      	lsls	r3, r3, #8
 8001fba:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fbe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001fc0:	e002      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fc2:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001fc4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001fc6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001fca:	0018      	movs	r0, r3
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	b00f      	add	sp, #60	; 0x3c
 8001fd0:	bd90      	pop	{r4, r7, pc}
 8001fd2:	46c0      	nop			; (mov r8, r8)
 8001fd4:	08002214 	.word	0x08002214
 8001fd8:	08002224 	.word	0x08002224
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	007a1200 	.word	0x007a1200

08001fe4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	2380      	movs	r3, #128	; 0x80
 8001ffa:	025b      	lsls	r3, r3, #9
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	d100      	bne.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002000:	e08e      	b.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002002:	2017      	movs	r0, #23
 8002004:	183b      	adds	r3, r7, r0
 8002006:	2200      	movs	r2, #0
 8002008:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800200a:	4b5f      	ldr	r3, [pc, #380]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800200c:	69da      	ldr	r2, [r3, #28]
 800200e:	2380      	movs	r3, #128	; 0x80
 8002010:	055b      	lsls	r3, r3, #21
 8002012:	4013      	ands	r3, r2
 8002014:	d110      	bne.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002016:	4b5c      	ldr	r3, [pc, #368]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002018:	69da      	ldr	r2, [r3, #28]
 800201a:	4b5b      	ldr	r3, [pc, #364]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800201c:	2180      	movs	r1, #128	; 0x80
 800201e:	0549      	lsls	r1, r1, #21
 8002020:	430a      	orrs	r2, r1
 8002022:	61da      	str	r2, [r3, #28]
 8002024:	4b58      	ldr	r3, [pc, #352]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002026:	69da      	ldr	r2, [r3, #28]
 8002028:	2380      	movs	r3, #128	; 0x80
 800202a:	055b      	lsls	r3, r3, #21
 800202c:	4013      	ands	r3, r2
 800202e:	60bb      	str	r3, [r7, #8]
 8002030:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002032:	183b      	adds	r3, r7, r0
 8002034:	2201      	movs	r2, #1
 8002036:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002038:	4b54      	ldr	r3, [pc, #336]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	2380      	movs	r3, #128	; 0x80
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	4013      	ands	r3, r2
 8002042:	d11a      	bne.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002044:	4b51      	ldr	r3, [pc, #324]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	4b50      	ldr	r3, [pc, #320]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800204a:	2180      	movs	r1, #128	; 0x80
 800204c:	0049      	lsls	r1, r1, #1
 800204e:	430a      	orrs	r2, r1
 8002050:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002052:	f7fe fbbb 	bl	80007cc <HAL_GetTick>
 8002056:	0003      	movs	r3, r0
 8002058:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800205a:	e008      	b.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800205c:	f7fe fbb6 	bl	80007cc <HAL_GetTick>
 8002060:	0002      	movs	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b64      	cmp	r3, #100	; 0x64
 8002068:	d901      	bls.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e087      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206e:	4b47      	ldr	r3, [pc, #284]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	4013      	ands	r3, r2
 8002078:	d0f0      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800207a:	4b43      	ldr	r3, [pc, #268]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800207c:	6a1a      	ldr	r2, [r3, #32]
 800207e:	23c0      	movs	r3, #192	; 0xc0
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4013      	ands	r3, r2
 8002084:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d034      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	23c0      	movs	r3, #192	; 0xc0
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4013      	ands	r3, r2
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	429a      	cmp	r2, r3
 800209a:	d02c      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800209c:	4b3a      	ldr	r3, [pc, #232]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	4a3b      	ldr	r2, [pc, #236]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020a2:	4013      	ands	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020a6:	4b38      	ldr	r3, [pc, #224]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020a8:	6a1a      	ldr	r2, [r3, #32]
 80020aa:	4b37      	ldr	r3, [pc, #220]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020ac:	2180      	movs	r1, #128	; 0x80
 80020ae:	0249      	lsls	r1, r1, #9
 80020b0:	430a      	orrs	r2, r1
 80020b2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020b4:	4b34      	ldr	r3, [pc, #208]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020b6:	6a1a      	ldr	r2, [r3, #32]
 80020b8:	4b33      	ldr	r3, [pc, #204]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020ba:	4936      	ldr	r1, [pc, #216]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80020bc:	400a      	ands	r2, r1
 80020be:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80020c0:	4b31      	ldr	r3, [pc, #196]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2201      	movs	r2, #1
 80020ca:	4013      	ands	r3, r2
 80020cc:	d013      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ce:	f7fe fb7d 	bl	80007cc <HAL_GetTick>
 80020d2:	0003      	movs	r3, r0
 80020d4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d6:	e009      	b.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d8:	f7fe fb78 	bl	80007cc <HAL_GetTick>
 80020dc:	0002      	movs	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	4a2d      	ldr	r2, [pc, #180]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d901      	bls.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e048      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ec:	4b26      	ldr	r3, [pc, #152]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	2202      	movs	r2, #2
 80020f2:	4013      	ands	r3, r2
 80020f4:	d0f0      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020f6:	4b24      	ldr	r3, [pc, #144]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	4a25      	ldr	r2, [pc, #148]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020fc:	4013      	ands	r3, r2
 80020fe:	0019      	movs	r1, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	4b20      	ldr	r3, [pc, #128]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002106:	430a      	orrs	r2, r1
 8002108:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800210a:	2317      	movs	r3, #23
 800210c:	18fb      	adds	r3, r7, r3
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d105      	bne.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002114:	4b1c      	ldr	r3, [pc, #112]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002116:	69da      	ldr	r2, [r3, #28]
 8002118:	4b1b      	ldr	r3, [pc, #108]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800211a:	4920      	ldr	r1, [pc, #128]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800211c:	400a      	ands	r2, r1
 800211e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2201      	movs	r2, #1
 8002126:	4013      	ands	r3, r2
 8002128:	d009      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800212a:	4b17      	ldr	r3, [pc, #92]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	2203      	movs	r2, #3
 8002130:	4393      	bics	r3, r2
 8002132:	0019      	movs	r1, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	4b13      	ldr	r3, [pc, #76]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800213a:	430a      	orrs	r2, r1
 800213c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2220      	movs	r2, #32
 8002144:	4013      	ands	r3, r2
 8002146:	d009      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002148:	4b0f      	ldr	r3, [pc, #60]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800214a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214c:	2210      	movs	r2, #16
 800214e:	4393      	bics	r3, r2
 8002150:	0019      	movs	r1, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68da      	ldr	r2, [r3, #12]
 8002156:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002158:	430a      	orrs	r2, r1
 800215a:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	2380      	movs	r3, #128	; 0x80
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	4013      	ands	r3, r2
 8002166:	d009      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002168:	4b07      	ldr	r3, [pc, #28]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800216a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216c:	2240      	movs	r2, #64	; 0x40
 800216e:	4393      	bics	r3, r2
 8002170:	0019      	movs	r1, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691a      	ldr	r2, [r3, #16]
 8002176:	4b04      	ldr	r3, [pc, #16]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002178:	430a      	orrs	r2, r1
 800217a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	0018      	movs	r0, r3
 8002180:	46bd      	mov	sp, r7
 8002182:	b006      	add	sp, #24
 8002184:	bd80      	pop	{r7, pc}
 8002186:	46c0      	nop			; (mov r8, r8)
 8002188:	40021000 	.word	0x40021000
 800218c:	40007000 	.word	0x40007000
 8002190:	fffffcff 	.word	0xfffffcff
 8002194:	fffeffff 	.word	0xfffeffff
 8002198:	00001388 	.word	0x00001388
 800219c:	efffffff 	.word	0xefffffff

080021a0 <__libc_init_array>:
 80021a0:	b570      	push	{r4, r5, r6, lr}
 80021a2:	2600      	movs	r6, #0
 80021a4:	4d0c      	ldr	r5, [pc, #48]	; (80021d8 <__libc_init_array+0x38>)
 80021a6:	4c0d      	ldr	r4, [pc, #52]	; (80021dc <__libc_init_array+0x3c>)
 80021a8:	1b64      	subs	r4, r4, r5
 80021aa:	10a4      	asrs	r4, r4, #2
 80021ac:	42a6      	cmp	r6, r4
 80021ae:	d109      	bne.n	80021c4 <__libc_init_array+0x24>
 80021b0:	2600      	movs	r6, #0
 80021b2:	f000 f821 	bl	80021f8 <_init>
 80021b6:	4d0a      	ldr	r5, [pc, #40]	; (80021e0 <__libc_init_array+0x40>)
 80021b8:	4c0a      	ldr	r4, [pc, #40]	; (80021e4 <__libc_init_array+0x44>)
 80021ba:	1b64      	subs	r4, r4, r5
 80021bc:	10a4      	asrs	r4, r4, #2
 80021be:	42a6      	cmp	r6, r4
 80021c0:	d105      	bne.n	80021ce <__libc_init_array+0x2e>
 80021c2:	bd70      	pop	{r4, r5, r6, pc}
 80021c4:	00b3      	lsls	r3, r6, #2
 80021c6:	58eb      	ldr	r3, [r5, r3]
 80021c8:	4798      	blx	r3
 80021ca:	3601      	adds	r6, #1
 80021cc:	e7ee      	b.n	80021ac <__libc_init_array+0xc>
 80021ce:	00b3      	lsls	r3, r6, #2
 80021d0:	58eb      	ldr	r3, [r5, r3]
 80021d2:	4798      	blx	r3
 80021d4:	3601      	adds	r6, #1
 80021d6:	e7f2      	b.n	80021be <__libc_init_array+0x1e>
 80021d8:	08002244 	.word	0x08002244
 80021dc:	08002244 	.word	0x08002244
 80021e0:	08002244 	.word	0x08002244
 80021e4:	08002248 	.word	0x08002248

080021e8 <memset>:
 80021e8:	0003      	movs	r3, r0
 80021ea:	1882      	adds	r2, r0, r2
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d100      	bne.n	80021f2 <memset+0xa>
 80021f0:	4770      	bx	lr
 80021f2:	7019      	strb	r1, [r3, #0]
 80021f4:	3301      	adds	r3, #1
 80021f6:	e7f9      	b.n	80021ec <memset+0x4>

080021f8 <_init>:
 80021f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021fa:	46c0      	nop			; (mov r8, r8)
 80021fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021fe:	bc08      	pop	{r3}
 8002200:	469e      	mov	lr, r3
 8002202:	4770      	bx	lr

08002204 <_fini>:
 8002204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800220a:	bc08      	pop	{r3}
 800220c:	469e      	mov	lr, r3
 800220e:	4770      	bx	lr
